/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: IM.Login.proto
 *
 */

import Foundation
import SwiftProtobuf


// service id:	0x0001

///  cmd id:		0x0101
struct IM_Login_IMMsgServReq: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Login_IMMsgServReq"}
  public var protoMessageName: String {return "IMMsgServReq"}
  public var protoPackageName: String {return "IM.Login"}
  public static let _protobuf_fieldNames = FieldNameMap()

  public var unknown = SwiftProtobuf.UnknownStorage()

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Login_IMMsgServReq) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Login_IMMsgServRsp: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Login_IMMsgServRsp"}
  public var protoMessageName: String {return "IMMsgServRsp"}
  public var protoPackageName: String {return "IM.Login"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "result_code", json: "resultCode", swift: "resultCode"),
    2: .unique(proto: "prior_ip", json: "priorIp", swift: "priorIp"),
    3: .unique(proto: "backip_ip", json: "backipIp", swift: "backipIp"),
    4: .same(proto: "port", swift: "port"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:		0x0102
  private var _resultCode: IM_BaseDefine_ResultType? = nil
  var resultCode: IM_BaseDefine_ResultType {
    get {return _resultCode ?? IM_BaseDefine_ResultType.refuseReasonNone}
    set {_resultCode = newValue}
  }
  public var hasResultCode: Bool {
    return _resultCode != nil
  }
  public mutating func clearResultCode() {
    return _resultCode = nil
  }

  private var _priorIp: String? = nil
  var priorIp: String {
    get {return _priorIp ?? ""}
    set {_priorIp = newValue}
  }
  public var hasPriorIp: Bool {
    return _priorIp != nil
  }
  public mutating func clearPriorIp() {
    return _priorIp = nil
  }

  private var _backipIp: String? = nil
  var backipIp: String {
    get {return _backipIp ?? ""}
    set {_backipIp = newValue}
  }
  public var hasBackipIp: Bool {
    return _backipIp != nil
  }
  public mutating func clearBackipIp() {
    return _backipIp = nil
  }

  private var _port: UInt32? = nil
  var port: UInt32 {
    get {return _port ?? 0}
    set {_port = newValue}
  }
  public var hasPort: Bool {
    return _port != nil
  }
  public mutating func clearPort() {
    return _port = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: IM_BaseDefine_ResultType.self, value: &_resultCode)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_priorIp)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_backipIp)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_port)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: IM_BaseDefine_ResultType.self, value: _resultCode ?? IM_BaseDefine_ResultType.refuseReasonNone, protoFieldNumber: 1)
    if let v = _priorIp {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 2)
    }
    if let v = _backipIp {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 3)
    }
    if let v = _port {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: v, protoFieldNumber: 4)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Login_IMMsgServRsp) -> Bool {
    if (resultCode != other.resultCode) {return false}
    if (priorIp != other.priorIp) {return false}
    if (backipIp != other.backipIp) {return false}
    if (port != other.port) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Login_IMLoginReq: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Login_IMLoginReq"}
  public var protoMessageName: String {return "IMLoginReq"}
  public var protoPackageName: String {return "IM.Login"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_name", json: "userName", swift: "userName"),
    2: .same(proto: "password", swift: "password"),
    3: .unique(proto: "online_status", json: "onlineStatus", swift: "onlineStatus"),
    4: .unique(proto: "client_type", json: "clientType", swift: "clientType"),
    5: .unique(proto: "client_version", json: "clientVersion", swift: "clientVersion"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:		0x0103
  private var _userName: String? = nil
  var userName: String {
    get {return _userName ?? ""}
    set {_userName = newValue}
  }
  public var hasUserName: Bool {
    return _userName != nil
  }
  public mutating func clearUserName() {
    return _userName = nil
  }

  private var _password: String? = nil
  var password: String {
    get {return _password ?? ""}
    set {_password = newValue}
  }
  public var hasPassword: Bool {
    return _password != nil
  }
  public mutating func clearPassword() {
    return _password = nil
  }

  private var _onlineStatus: IM_BaseDefine_UserStatType? = nil
  var onlineStatus: IM_BaseDefine_UserStatType {
    get {return _onlineStatus ?? IM_BaseDefine_UserStatType.userStatusOnline}
    set {_onlineStatus = newValue}
  }
  public var hasOnlineStatus: Bool {
    return _onlineStatus != nil
  }
  public mutating func clearOnlineStatus() {
    return _onlineStatus = nil
  }

  private var _clientType: IM_BaseDefine_ClientType? = nil
  var clientType: IM_BaseDefine_ClientType {
    get {return _clientType ?? IM_BaseDefine_ClientType.windows}
    set {_clientType = newValue}
  }
  public var hasClientType: Bool {
    return _clientType != nil
  }
  public mutating func clearClientType() {
    return _clientType = nil
  }

  private var _clientVersion: String? = nil
  var clientVersion: String {
    get {return _clientVersion ?? ""}
    set {_clientVersion = newValue}
  }
  public var hasClientVersion: Bool {
    return _clientVersion != nil
  }
  public mutating func clearClientVersion() {
    return _clientVersion = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_userName)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_password)
    case 3: try setter.decodeSingularField(fieldType: IM_BaseDefine_UserStatType.self, value: &_onlineStatus)
    case 4: try setter.decodeSingularField(fieldType: IM_BaseDefine_ClientType.self, value: &_clientType)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_clientVersion)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _userName ?? "", protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _password ?? "", protoFieldNumber: 2)
    try visitor.visitSingularField(fieldType: IM_BaseDefine_UserStatType.self, value: _onlineStatus ?? IM_BaseDefine_UserStatType.userStatusOnline, protoFieldNumber: 3)
    try visitor.visitSingularField(fieldType: IM_BaseDefine_ClientType.self, value: _clientType ?? IM_BaseDefine_ClientType.windows, protoFieldNumber: 4)
    if let v = _clientVersion {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 5)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Login_IMLoginReq) -> Bool {
    if (userName != other.userName) {return false}
    if (password != other.password) {return false}
    if (onlineStatus != other.onlineStatus) {return false}
    if (clientType != other.clientType) {return false}
    if (clientVersion != other.clientVersion) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Login_IMLoginRes: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Login_IMLoginRes"}
  public var protoMessageName: String {return "IMLoginRes"}
  public var protoPackageName: String {return "IM.Login"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "server_time", json: "serverTime", swift: "serverTime"),
    2: .unique(proto: "result_code", json: "resultCode", swift: "resultCode"),
    3: .unique(proto: "result_string", json: "resultString", swift: "resultString"),
    4: .unique(proto: "online_status", json: "onlineStatus", swift: "onlineStatus"),
    5: .unique(proto: "user_info", json: "userInfo", swift: "userInfo"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = IM_Login_IMLoginRes
    var unknown = SwiftProtobuf.UnknownStorage()
    var _serverTime: UInt32? = nil
    var _resultCode: IM_BaseDefine_ResultType? = nil
    var _resultString: String? = nil
    var _onlineStatus: IM_BaseDefine_UserStatType? = nil
    var _userInfo: IM_BaseDefine_UserInfo? = nil

    init() {}

    func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_serverTime)
      case 2: try setter.decodeSingularField(fieldType: IM_BaseDefine_ResultType.self, value: &_resultCode)
      case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_resultString)
      case 4: try setter.decodeSingularField(fieldType: IM_BaseDefine_UserStatType.self, value: &_onlineStatus)
      case 5: try setter.decodeSingularMessageField(fieldType: IM_BaseDefine_UserInfo.self, value: &_userInfo)
      default: break
      }
    }

    func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _serverTime ?? 0, protoFieldNumber: 1)
      try visitor.visitSingularField(fieldType: IM_BaseDefine_ResultType.self, value: _resultCode ?? IM_BaseDefine_ResultType.refuseReasonNone, protoFieldNumber: 2)
      if let v = _resultString {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 3)
      }
      if let v = _onlineStatus {
        try visitor.visitSingularField(fieldType: IM_BaseDefine_UserStatType.self, value: v, protoFieldNumber: 4)
      }
      if let v = _userInfo {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 5)
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if (_serverTime != other._serverTime) {return false}
      if (_resultCode != other._resultCode) {return false}
      if (_resultString != other._resultString) {return false}
      if (_onlineStatus != other._onlineStatus) {return false}
      if ((_userInfo != nil || other._userInfo != nil) && (_userInfo == nil || other._userInfo == nil || _userInfo! != other._userInfo!)) {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._serverTime = _serverTime
      clone._resultCode = _resultCode
      clone._resultString = _resultString
      clone._onlineStatus = _onlineStatus
      clone._userInfo = _userInfo
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var unknown: SwiftProtobuf.UnknownStorage {
    get {return _storage.unknown}
    set {_storage.unknown = newValue}
  }

  ///  cmd id:		0x0104
  var serverTime: UInt32 {
    get {return _storage._serverTime ?? 0}
    set {_uniqueStorage()._serverTime = newValue}
  }
  public var hasServerTime: Bool {
    return _storage._serverTime != nil
  }
  public mutating func clearServerTime() {
    return _storage._serverTime = nil
  }

  var resultCode: IM_BaseDefine_ResultType {
    get {return _storage._resultCode ?? IM_BaseDefine_ResultType.refuseReasonNone}
    set {_uniqueStorage()._resultCode = newValue}
  }
  public var hasResultCode: Bool {
    return _storage._resultCode != nil
  }
  public mutating func clearResultCode() {
    return _storage._resultCode = nil
  }

  var resultString: String {
    get {return _storage._resultString ?? ""}
    set {_uniqueStorage()._resultString = newValue}
  }
  public var hasResultString: Bool {
    return _storage._resultString != nil
  }
  public mutating func clearResultString() {
    return _storage._resultString = nil
  }

  var onlineStatus: IM_BaseDefine_UserStatType {
    get {return _storage._onlineStatus ?? IM_BaseDefine_UserStatType.userStatusOnline}
    set {_uniqueStorage()._onlineStatus = newValue}
  }
  public var hasOnlineStatus: Bool {
    return _storage._onlineStatus != nil
  }
  public mutating func clearOnlineStatus() {
    return _storage._onlineStatus = nil
  }

  var userInfo: IM_BaseDefine_UserInfo {
    get {return _storage._userInfo ?? IM_BaseDefine_UserInfo()}
    set {_uniqueStorage()._userInfo = newValue}
  }
  public var hasUserInfo: Bool {
    return _storage._userInfo != nil
  }
  public mutating func clearUserInfo() {
    return _storage._userInfo = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Login_IMLoginRes) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///  cmd id:		0x0105
struct IM_Login_IMLogoutReq: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Login_IMLogoutReq"}
  public var protoMessageName: String {return "IMLogoutReq"}
  public var protoPackageName: String {return "IM.Login"}
  public static let _protobuf_fieldNames = FieldNameMap()

  public var unknown = SwiftProtobuf.UnknownStorage()

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Login_IMLogoutReq) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Login_IMLogoutRsp: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Login_IMLogoutRsp"}
  public var protoMessageName: String {return "IMLogoutRsp"}
  public var protoPackageName: String {return "IM.Login"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "result_code", json: "resultCode", swift: "resultCode"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:		0x0106
  private var _resultCode: UInt32? = nil
  var resultCode: UInt32 {
    get {return _resultCode ?? 0}
    set {_resultCode = newValue}
  }
  public var hasResultCode: Bool {
    return _resultCode != nil
  }
  public mutating func clearResultCode() {
    return _resultCode = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_resultCode)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _resultCode ?? 0, protoFieldNumber: 1)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Login_IMLogoutRsp) -> Bool {
    if (resultCode != other.resultCode) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Login_IMKickUser: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Login_IMKickUser"}
  public var protoMessageName: String {return "IMKickUser"}
  public var protoPackageName: String {return "IM.Login"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "kick_reason", json: "kickReason", swift: "kickReason"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:		0x0107
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _kickReason: IM_BaseDefine_KickReasonType? = nil
  var kickReason: IM_BaseDefine_KickReasonType {
    get {return _kickReason ?? IM_BaseDefine_KickReasonType.kickReasonDuplicateUser}
    set {_kickReason = newValue}
  }
  public var hasKickReason: Bool {
    return _kickReason != nil
  }
  public mutating func clearKickReason() {
    return _kickReason = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: IM_BaseDefine_KickReasonType.self, value: &_kickReason)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: IM_BaseDefine_KickReasonType.self, value: _kickReason ?? IM_BaseDefine_KickReasonType.kickReasonDuplicateUser, protoFieldNumber: 2)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Login_IMKickUser) -> Bool {
    if (userId != other.userId) {return false}
    if (kickReason != other.kickReason) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Login_IMDeviceTokenReq: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Login_IMDeviceTokenReq"}
  public var protoMessageName: String {return "IMDeviceTokenReq"}
  public var protoPackageName: String {return "IM.Login"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "device_token", json: "deviceToken", swift: "deviceToken"),
    3: .unique(proto: "client_type", json: "clientType", swift: "clientType"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:		0x0108
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _deviceToken: String? = nil
  var deviceToken: String {
    get {return _deviceToken ?? ""}
    set {_deviceToken = newValue}
  }
  public var hasDeviceToken: Bool {
    return _deviceToken != nil
  }
  public mutating func clearDeviceToken() {
    return _deviceToken = nil
  }

  private var _clientType: IM_BaseDefine_ClientType? = nil
  var clientType: IM_BaseDefine_ClientType {
    get {return _clientType ?? IM_BaseDefine_ClientType.windows}
    set {_clientType = newValue}
  }
  public var hasClientType: Bool {
    return _clientType != nil
  }
  public mutating func clearClientType() {
    return _clientType = nil
  }

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_deviceToken)
    case 3: try setter.decodeSingularField(fieldType: IM_BaseDefine_ClientType.self, value: &_clientType)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _deviceToken ?? "", protoFieldNumber: 2)
    if let v = _clientType {
      try visitor.visitSingularField(fieldType: IM_BaseDefine_ClientType.self, value: v, protoFieldNumber: 3)
    }
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Login_IMDeviceTokenReq) -> Bool {
    if (userId != other.userId) {return false}
    if (deviceToken != other.deviceToken) {return false}
    if (clientType != other.clientType) {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Login_IMDeviceTokenRsp: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Login_IMDeviceTokenRsp"}
  public var protoMessageName: String {return "IMDeviceTokenRsp"}
  public var protoPackageName: String {return "IM.Login"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id: 		0x0109
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Login_IMDeviceTokenRsp) -> Bool {
    if (userId != other.userId) {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

///  只给移动端请求
struct IM_Login_IMKickPCClientReq: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Login_IMKickPCClientReq"}
  public var protoMessageName: String {return "IMKickPCClientReq"}
  public var protoPackageName: String {return "IM.Login"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:		0x010a
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Login_IMKickPCClientReq) -> Bool {
    if (userId != other.userId) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Login_IMKickPCClientRsp: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Login_IMKickPCClientRsp"}
  public var protoMessageName: String {return "IMKickPCClientRsp"}
  public var protoPackageName: String {return "IM.Login"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "result_code", json: "resultCode", swift: "resultCode"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id: 		0x010b
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _resultCode: UInt32? = nil
  var resultCode: UInt32 {
    get {return _resultCode ?? 0}
    set {_resultCode = newValue}
  }
  public var hasResultCode: Bool {
    return _resultCode != nil
  }
  public mutating func clearResultCode() {
    return _resultCode = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_resultCode)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _resultCode ?? 0, protoFieldNumber: 2)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Login_IMKickPCClientRsp) -> Bool {
    if (userId != other.userId) {return false}
    if (resultCode != other.resultCode) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

///   一旦设置以后，22:00 -- 07:00不发送
struct IM_Login_IMPushShieldReq: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Login_IMPushShieldReq"}
  public var protoMessageName: String {return "IMPushShieldReq"}
  public var protoPackageName: String {return "IM.Login"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "shield_status", json: "shieldStatus", swift: "shieldStatus"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:			0x010c
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  ///   1:开启，0：关闭
  private var _shieldStatus: UInt32? = nil
  var shieldStatus: UInt32 {
    get {return _shieldStatus ?? 0}
    set {_shieldStatus = newValue}
  }
  public var hasShieldStatus: Bool {
    return _shieldStatus != nil
  }
  public mutating func clearShieldStatus() {
    return _shieldStatus = nil
  }

  ///   服务端用，客户端不用设置
  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_shieldStatus)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _shieldStatus ?? 0, protoFieldNumber: 2)
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Login_IMPushShieldReq) -> Bool {
    if (userId != other.userId) {return false}
    if (shieldStatus != other.shieldStatus) {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Login_IMPushShieldRsp: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Login_IMPushShieldRsp"}
  public var protoMessageName: String {return "IMPushShieldRsp"}
  public var protoPackageName: String {return "IM.Login"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "result_code", json: "resultCode", swift: "resultCode"),
    3: .unique(proto: "shield_status", json: "shieldStatus", swift: "shieldStatus"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:			0x010d
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  ///   值： 0:successed 1:failed
  private var _resultCode: UInt32? = nil
  var resultCode: UInt32 {
    get {return _resultCode ?? 0}
    set {_resultCode = newValue}
  }
  public var hasResultCode: Bool {
    return _resultCode != nil
  }
  public mutating func clearResultCode() {
    return _resultCode = nil
  }

  ///   值： 如果result_code值为0(successed)，则shield_status值设置， 1:开启， 0:关闭
  private var _shieldStatus: UInt32? = nil
  var shieldStatus: UInt32 {
    get {return _shieldStatus ?? 0}
    set {_shieldStatus = newValue}
  }
  public var hasShieldStatus: Bool {
    return _shieldStatus != nil
  }
  public mutating func clearShieldStatus() {
    return _shieldStatus = nil
  }

  ///   服务端用，客户端不用设置
  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_resultCode)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_shieldStatus)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _resultCode ?? 0, protoFieldNumber: 2)
    if let v = _shieldStatus {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: v, protoFieldNumber: 3)
    }
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Login_IMPushShieldRsp) -> Bool {
    if (userId != other.userId) {return false}
    if (resultCode != other.resultCode) {return false}
    if (shieldStatus != other.shieldStatus) {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

///   如果用户重新安装app，第一次启动登录成功后，app主动查询
///   服务端返回IMQueryPushShieldRsp
struct IM_Login_IMQueryPushShieldReq: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Login_IMQueryPushShieldReq"}
  public var protoMessageName: String {return "IMQueryPushShieldReq"}
  public var protoPackageName: String {return "IM.Login"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:			0x010e
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  ///   服务端用，客户端不用设置
  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Login_IMQueryPushShieldReq) -> Bool {
    if (userId != other.userId) {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Login_IMQueryPushShieldRsp: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Login_IMQueryPushShieldRsp"}
  public var protoMessageName: String {return "IMQueryPushShieldRsp"}
  public var protoPackageName: String {return "IM.Login"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "result_code", json: "resultCode", swift: "resultCode"),
    3: .unique(proto: "shield_status", json: "shieldStatus", swift: "shieldStatus"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:			0x010f
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  ///   值： 0:successed 1:failed
  private var _resultCode: UInt32? = nil
  var resultCode: UInt32 {
    get {return _resultCode ?? 0}
    set {_resultCode = newValue}
  }
  public var hasResultCode: Bool {
    return _resultCode != nil
  }
  public mutating func clearResultCode() {
    return _resultCode = nil
  }

  ///   值： 如果result_code值为0(successed)，则shield_status值设置， 1:开启， 0:关闭
  private var _shieldStatus: UInt32? = nil
  var shieldStatus: UInt32 {
    get {return _shieldStatus ?? 0}
    set {_shieldStatus = newValue}
  }
  public var hasShieldStatus: Bool {
    return _shieldStatus != nil
  }
  public mutating func clearShieldStatus() {
    return _shieldStatus = nil
  }

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_resultCode)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_shieldStatus)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _resultCode ?? 0, protoFieldNumber: 2)
    if let v = _shieldStatus {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: v, protoFieldNumber: 3)
    }
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Login_IMQueryPushShieldRsp) -> Bool {
    if (userId != other.userId) {return false}
    if (resultCode != other.resultCode) {return false}
    if (shieldStatus != other.shieldStatus) {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}
