/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: IM.Buddy.proto
 *
 */

import Foundation
import SwiftProtobuf


// service id   0x0002

struct IM_Buddy_IMRecentContactSessionReq: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Buddy_IMRecentContactSessionReq"}
  public var protoMessageName: String {return "IMRecentContactSessionReq"}
  public var protoPackageName: String {return "IM.Buddy"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "latest_update_time", json: "latestUpdateTime", swift: "latestUpdateTime"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:		0x0201
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _latestUpdateTime: UInt32? = nil
  var latestUpdateTime: UInt32 {
    get {return _latestUpdateTime ?? 0}
    set {_latestUpdateTime = newValue}
  }
  public var hasLatestUpdateTime: Bool {
    return _latestUpdateTime != nil
  }
  public mutating func clearLatestUpdateTime() {
    return _latestUpdateTime = nil
  }

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_latestUpdateTime)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _latestUpdateTime ?? 0, protoFieldNumber: 2)
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Buddy_IMRecentContactSessionReq) -> Bool {
    if (userId != other.userId) {return false}
    if (latestUpdateTime != other.latestUpdateTime) {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Buddy_IMRecentContactSessionRsp: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Buddy_IMRecentContactSessionRsp"}
  public var protoMessageName: String {return "IMRecentContactSessionRsp"}
  public var protoPackageName: String {return "IM.Buddy"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "contact_session_list", json: "contactSessionList", swift: "contactSessionList"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:		0x0202
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  var contactSessionList: [IM_BaseDefine_ContactSessionInfo] = []

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeRepeatedMessageField(fieldType: IM_BaseDefine_ContactSessionInfo.self, value: &contactSessionList)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    if !contactSessionList.isEmpty {
      try visitor.visitRepeatedMessageField(value: contactSessionList, protoFieldNumber: 2)
    }
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Buddy_IMRecentContactSessionRsp) -> Bool {
    if (userId != other.userId) {return false}
    if contactSessionList != other.contactSessionList {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Buddy_IMUserStatNotify: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Buddy_IMUserStatNotify"}
  public var protoMessageName: String {return "IMUserStatNotify"}
  public var protoPackageName: String {return "IM.Buddy"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_stat", json: "userStat", swift: "userStat"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = IM_Buddy_IMUserStatNotify
    var unknown = SwiftProtobuf.UnknownStorage()
    var _userStat: IM_BaseDefine_UserStat? = nil

    init() {}

    func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: IM_BaseDefine_UserStat.self, value: &_userStat)
      default: break
      }
    }

    func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if let v = _userStat {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1)
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if ((_userStat != nil || other._userStat != nil) && (_userStat == nil || other._userStat == nil || _userStat! != other._userStat!)) {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._userStat = _userStat
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var unknown: SwiftProtobuf.UnknownStorage {
    get {return _storage.unknown}
    set {_storage.unknown = newValue}
  }

  ///  cmd id:		0x0203
  var userStat: IM_BaseDefine_UserStat {
    get {return _storage._userStat ?? IM_BaseDefine_UserStat()}
    set {_uniqueStorage()._userStat = newValue}
  }
  public var hasUserStat: Bool {
    return _storage._userStat != nil
  }
  public mutating func clearUserStat() {
    return _storage._userStat = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Buddy_IMUserStatNotify) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

struct IM_Buddy_IMUsersInfoReq: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Buddy_IMUsersInfoReq"}
  public var protoMessageName: String {return "IMUsersInfoReq"}
  public var protoPackageName: String {return "IM.Buddy"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "user_id_list", json: "userIdList", swift: "userIdList"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:		0x0204
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  var userIdList: [UInt32] = []

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &userIdList)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    if !userIdList.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: userIdList, protoFieldNumber: 2)
    }
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Buddy_IMUsersInfoReq) -> Bool {
    if (userId != other.userId) {return false}
    if userIdList != other.userIdList {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Buddy_IMUsersInfoRsp: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Buddy_IMUsersInfoRsp"}
  public var protoMessageName: String {return "IMUsersInfoRsp"}
  public var protoPackageName: String {return "IM.Buddy"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "user_info_list", json: "userInfoList", swift: "userInfoList"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:		0x0205
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  var userInfoList: [IM_BaseDefine_UserInfo] = []

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeRepeatedMessageField(fieldType: IM_BaseDefine_UserInfo.self, value: &userInfoList)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    if !userInfoList.isEmpty {
      try visitor.visitRepeatedMessageField(value: userInfoList, protoFieldNumber: 2)
    }
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Buddy_IMUsersInfoRsp) -> Bool {
    if (userId != other.userId) {return false}
    if userInfoList != other.userInfoList {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Buddy_IMRemoveSessionReq: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Buddy_IMRemoveSessionReq"}
  public var protoMessageName: String {return "IMRemoveSessionReq"}
  public var protoPackageName: String {return "IM.Buddy"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "session_type", json: "sessionType", swift: "sessionType"),
    3: .unique(proto: "session_id", json: "sessionId", swift: "sessionId"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:		0x0206
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _sessionType: IM_BaseDefine_SessionType? = nil
  var sessionType: IM_BaseDefine_SessionType {
    get {return _sessionType ?? IM_BaseDefine_SessionType.single}
    set {_sessionType = newValue}
  }
  public var hasSessionType: Bool {
    return _sessionType != nil
  }
  public mutating func clearSessionType() {
    return _sessionType = nil
  }

  private var _sessionId: UInt32? = nil
  var sessionId: UInt32 {
    get {return _sessionId ?? 0}
    set {_sessionId = newValue}
  }
  public var hasSessionId: Bool {
    return _sessionId != nil
  }
  public mutating func clearSessionId() {
    return _sessionId = nil
  }

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: IM_BaseDefine_SessionType.self, value: &_sessionType)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_sessionId)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: IM_BaseDefine_SessionType.self, value: _sessionType ?? IM_BaseDefine_SessionType.single, protoFieldNumber: 2)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _sessionId ?? 0, protoFieldNumber: 3)
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Buddy_IMRemoveSessionReq) -> Bool {
    if (userId != other.userId) {return false}
    if (sessionType != other.sessionType) {return false}
    if (sessionId != other.sessionId) {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Buddy_IMRemoveSessionRsp: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Buddy_IMRemoveSessionRsp"}
  public var protoMessageName: String {return "IMRemoveSessionRsp"}
  public var protoPackageName: String {return "IM.Buddy"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "result_code", json: "resultCode", swift: "resultCode"),
    3: .unique(proto: "session_type", json: "sessionType", swift: "sessionType"),
    4: .unique(proto: "session_id", json: "sessionId", swift: "sessionId"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:		0x0207
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _resultCode: UInt32? = nil
  var resultCode: UInt32 {
    get {return _resultCode ?? 0}
    set {_resultCode = newValue}
  }
  public var hasResultCode: Bool {
    return _resultCode != nil
  }
  public mutating func clearResultCode() {
    return _resultCode = nil
  }

  private var _sessionType: IM_BaseDefine_SessionType? = nil
  var sessionType: IM_BaseDefine_SessionType {
    get {return _sessionType ?? IM_BaseDefine_SessionType.single}
    set {_sessionType = newValue}
  }
  public var hasSessionType: Bool {
    return _sessionType != nil
  }
  public mutating func clearSessionType() {
    return _sessionType = nil
  }

  private var _sessionId: UInt32? = nil
  var sessionId: UInt32 {
    get {return _sessionId ?? 0}
    set {_sessionId = newValue}
  }
  public var hasSessionId: Bool {
    return _sessionId != nil
  }
  public mutating func clearSessionId() {
    return _sessionId = nil
  }

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_resultCode)
    case 3: try setter.decodeSingularField(fieldType: IM_BaseDefine_SessionType.self, value: &_sessionType)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_sessionId)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _resultCode ?? 0, protoFieldNumber: 2)
    try visitor.visitSingularField(fieldType: IM_BaseDefine_SessionType.self, value: _sessionType ?? IM_BaseDefine_SessionType.single, protoFieldNumber: 3)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _sessionId ?? 0, protoFieldNumber: 4)
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Buddy_IMRemoveSessionRsp) -> Bool {
    if (userId != other.userId) {return false}
    if (resultCode != other.resultCode) {return false}
    if (sessionType != other.sessionType) {return false}
    if (sessionId != other.sessionId) {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Buddy_IMAllUserReq: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Buddy_IMAllUserReq"}
  public var protoMessageName: String {return "IMAllUserReq"}
  public var protoPackageName: String {return "IM.Buddy"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "latest_update_time", json: "latestUpdateTime", swift: "latestUpdateTime"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:		0x0208
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _latestUpdateTime: UInt32? = nil
  var latestUpdateTime: UInt32 {
    get {return _latestUpdateTime ?? 0}
    set {_latestUpdateTime = newValue}
  }
  public var hasLatestUpdateTime: Bool {
    return _latestUpdateTime != nil
  }
  public mutating func clearLatestUpdateTime() {
    return _latestUpdateTime = nil
  }

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_latestUpdateTime)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _latestUpdateTime ?? 0, protoFieldNumber: 2)
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Buddy_IMAllUserReq) -> Bool {
    if (userId != other.userId) {return false}
    if (latestUpdateTime != other.latestUpdateTime) {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Buddy_IMAllUserRsp: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Buddy_IMAllUserRsp"}
  public var protoMessageName: String {return "IMAllUserRsp"}
  public var protoPackageName: String {return "IM.Buddy"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "latest_update_time", json: "latestUpdateTime", swift: "latestUpdateTime"),
    3: .unique(proto: "user_list", json: "userList", swift: "userList"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:		0x0209
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _latestUpdateTime: UInt32? = nil
  var latestUpdateTime: UInt32 {
    get {return _latestUpdateTime ?? 0}
    set {_latestUpdateTime = newValue}
  }
  public var hasLatestUpdateTime: Bool {
    return _latestUpdateTime != nil
  }
  public mutating func clearLatestUpdateTime() {
    return _latestUpdateTime = nil
  }

  var userList: [IM_BaseDefine_UserInfo] = []

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_latestUpdateTime)
    case 3: try setter.decodeRepeatedMessageField(fieldType: IM_BaseDefine_UserInfo.self, value: &userList)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _latestUpdateTime ?? 0, protoFieldNumber: 2)
    if !userList.isEmpty {
      try visitor.visitRepeatedMessageField(value: userList, protoFieldNumber: 3)
    }
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Buddy_IMAllUserRsp) -> Bool {
    if (userId != other.userId) {return false}
    if (latestUpdateTime != other.latestUpdateTime) {return false}
    if userList != other.userList {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Buddy_IMUsersStatReq: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Buddy_IMUsersStatReq"}
  public var protoMessageName: String {return "IMUsersStatReq"}
  public var protoPackageName: String {return "IM.Buddy"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "user_id_list", json: "userIdList", swift: "userIdList"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:		0x020a
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  var userIdList: [UInt32] = []

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &userIdList)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    if !userIdList.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: userIdList, protoFieldNumber: 2)
    }
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Buddy_IMUsersStatReq) -> Bool {
    if (userId != other.userId) {return false}
    if userIdList != other.userIdList {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Buddy_IMUsersStatRsp: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Buddy_IMUsersStatRsp"}
  public var protoMessageName: String {return "IMUsersStatRsp"}
  public var protoPackageName: String {return "IM.Buddy"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "user_stat_list", json: "userStatList", swift: "userStatList"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:		0x020b
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  var userStatList: [IM_BaseDefine_UserStat] = []

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeRepeatedMessageField(fieldType: IM_BaseDefine_UserStat.self, value: &userStatList)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    if !userStatList.isEmpty {
      try visitor.visitRepeatedMessageField(value: userStatList, protoFieldNumber: 2)
    }
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Buddy_IMUsersStatRsp) -> Bool {
    if (userId != other.userId) {return false}
    if userStatList != other.userStatList {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Buddy_IMChangeAvatarReq: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Buddy_IMChangeAvatarReq"}
  public var protoMessageName: String {return "IMChangeAvatarReq"}
  public var protoPackageName: String {return "IM.Buddy"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "avatar_url", json: "avatarUrl", swift: "avatarURL"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:		0x020c
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _avatarURL: String? = nil
  var avatarURL: String {
    get {return _avatarURL ?? ""}
    set {_avatarURL = newValue}
  }
  public var hasAvatarURL: Bool {
    return _avatarURL != nil
  }
  public mutating func clearAvatarURL() {
    return _avatarURL = nil
  }

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_avatarURL)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _avatarURL ?? "", protoFieldNumber: 2)
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Buddy_IMChangeAvatarReq) -> Bool {
    if (userId != other.userId) {return false}
    if (avatarURL != other.avatarURL) {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Buddy_IMChangeAvatarRsp: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Buddy_IMChangeAvatarRsp"}
  public var protoMessageName: String {return "IMChangeAvatarRsp"}
  public var protoPackageName: String {return "IM.Buddy"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "result_code", json: "resultCode", swift: "resultCode"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:		0x020d
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _resultCode: UInt32? = nil
  var resultCode: UInt32 {
    get {return _resultCode ?? 0}
    set {_resultCode = newValue}
  }
  public var hasResultCode: Bool {
    return _resultCode != nil
  }
  public mutating func clearResultCode() {
    return _resultCode = nil
  }

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_resultCode)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _resultCode ?? 0, protoFieldNumber: 2)
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Buddy_IMChangeAvatarRsp) -> Bool {
    if (userId != other.userId) {return false}
    if (resultCode != other.resultCode) {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

///  只给移动端通知
struct IM_Buddy_IMPCLoginStatusNotify: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Buddy_IMPCLoginStatusNotify"}
  public var protoMessageName: String {return "IMPCLoginStatusNotify"}
  public var protoPackageName: String {return "IM.Buddy"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "login_stat", json: "loginStat", swift: "loginStat"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:		0x020e
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _loginStat: IM_BaseDefine_UserStatType? = nil
  var loginStat: IM_BaseDefine_UserStatType {
    get {return _loginStat ?? IM_BaseDefine_UserStatType.userStatusOnline}
    set {_loginStat = newValue}
  }
  public var hasLoginStat: Bool {
    return _loginStat != nil
  }
  public mutating func clearLoginStat() {
    return _loginStat = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: IM_BaseDefine_UserStatType.self, value: &_loginStat)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: IM_BaseDefine_UserStatType.self, value: _loginStat ?? IM_BaseDefine_UserStatType.userStatusOnline, protoFieldNumber: 2)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Buddy_IMPCLoginStatusNotify) -> Bool {
    if (userId != other.userId) {return false}
    if (loginStat != other.loginStat) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Buddy_IMRemoveSessionNotify: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Buddy_IMRemoveSessionNotify"}
  public var protoMessageName: String {return "IMRemoveSessionNotify"}
  public var protoPackageName: String {return "IM.Buddy"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "session_type", json: "sessionType", swift: "sessionType"),
    3: .unique(proto: "session_id", json: "sessionId", swift: "sessionId"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:		0x020f
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _sessionType: IM_BaseDefine_SessionType? = nil
  var sessionType: IM_BaseDefine_SessionType {
    get {return _sessionType ?? IM_BaseDefine_SessionType.single}
    set {_sessionType = newValue}
  }
  public var hasSessionType: Bool {
    return _sessionType != nil
  }
  public mutating func clearSessionType() {
    return _sessionType = nil
  }

  private var _sessionId: UInt32? = nil
  var sessionId: UInt32 {
    get {return _sessionId ?? 0}
    set {_sessionId = newValue}
  }
  public var hasSessionId: Bool {
    return _sessionId != nil
  }
  public mutating func clearSessionId() {
    return _sessionId = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: IM_BaseDefine_SessionType.self, value: &_sessionType)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_sessionId)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: IM_BaseDefine_SessionType.self, value: _sessionType ?? IM_BaseDefine_SessionType.single, protoFieldNumber: 2)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _sessionId ?? 0, protoFieldNumber: 3)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Buddy_IMRemoveSessionNotify) -> Bool {
    if (userId != other.userId) {return false}
    if (sessionType != other.sessionType) {return false}
    if (sessionId != other.sessionId) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Buddy_IMDepartmentReq: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Buddy_IMDepartmentReq"}
  public var protoMessageName: String {return "IMDepartmentReq"}
  public var protoPackageName: String {return "IM.Buddy"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "latest_update_time", json: "latestUpdateTime", swift: "latestUpdateTime"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:		0x0210
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _latestUpdateTime: UInt32? = nil
  var latestUpdateTime: UInt32 {
    get {return _latestUpdateTime ?? 0}
    set {_latestUpdateTime = newValue}
  }
  public var hasLatestUpdateTime: Bool {
    return _latestUpdateTime != nil
  }
  public mutating func clearLatestUpdateTime() {
    return _latestUpdateTime = nil
  }

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_latestUpdateTime)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _latestUpdateTime ?? 0, protoFieldNumber: 2)
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Buddy_IMDepartmentReq) -> Bool {
    if (userId != other.userId) {return false}
    if (latestUpdateTime != other.latestUpdateTime) {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Buddy_IMDepartmentRsp: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Buddy_IMDepartmentRsp"}
  public var protoMessageName: String {return "IMDepartmentRsp"}
  public var protoPackageName: String {return "IM.Buddy"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "latest_update_time", json: "latestUpdateTime", swift: "latestUpdateTime"),
    3: .unique(proto: "dept_list", json: "deptList", swift: "deptList"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:		0x0211
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _latestUpdateTime: UInt32? = nil
  var latestUpdateTime: UInt32 {
    get {return _latestUpdateTime ?? 0}
    set {_latestUpdateTime = newValue}
  }
  public var hasLatestUpdateTime: Bool {
    return _latestUpdateTime != nil
  }
  public mutating func clearLatestUpdateTime() {
    return _latestUpdateTime = nil
  }

  var deptList: [IM_BaseDefine_DepartInfo] = []

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_latestUpdateTime)
    case 3: try setter.decodeRepeatedMessageField(fieldType: IM_BaseDefine_DepartInfo.self, value: &deptList)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _latestUpdateTime ?? 0, protoFieldNumber: 2)
    if !deptList.isEmpty {
      try visitor.visitRepeatedMessageField(value: deptList, protoFieldNumber: 3)
    }
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Buddy_IMDepartmentRsp) -> Bool {
    if (userId != other.userId) {return false}
    if (latestUpdateTime != other.latestUpdateTime) {return false}
    if deptList != other.deptList {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Buddy_IMAvatarChangedNotify: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Buddy_IMAvatarChangedNotify"}
  public var protoMessageName: String {return "IMAvatarChangedNotify"}
  public var protoPackageName: String {return "IM.Buddy"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "changed_user_id", json: "changedUserId", swift: "changedUserId"),
    2: .unique(proto: "avatar_url", json: "avatarUrl", swift: "avatarURL"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:		0x02012
  private var _changedUserId: UInt32? = nil
  var changedUserId: UInt32 {
    get {return _changedUserId ?? 0}
    set {_changedUserId = newValue}
  }
  public var hasChangedUserId: Bool {
    return _changedUserId != nil
  }
  public mutating func clearChangedUserId() {
    return _changedUserId = nil
  }

  private var _avatarURL: String? = nil
  var avatarURL: String {
    get {return _avatarURL ?? ""}
    set {_avatarURL = newValue}
  }
  public var hasAvatarURL: Bool {
    return _avatarURL != nil
  }
  public mutating func clearAvatarURL() {
    return _avatarURL = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_changedUserId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_avatarURL)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _changedUserId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _avatarURL ?? "", protoFieldNumber: 2)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Buddy_IMAvatarChangedNotify) -> Bool {
    if (changedUserId != other.changedUserId) {return false}
    if (avatarURL != other.avatarURL) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

///  cmd id:		0x0213
struct IM_Buddy_IMChangeSignInfoReq: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Buddy_IMChangeSignInfoReq"}
  public var protoMessageName: String {return "IMChangeSignInfoReq"}
  public var protoPackageName: String {return "IM.Buddy"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "sign_info", json: "signInfo", swift: "signInfo"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _signInfo: String? = nil
  var signInfo: String {
    get {return _signInfo ?? ""}
    set {_signInfo = newValue}
  }
  public var hasSignInfo: Bool {
    return _signInfo != nil
  }
  public mutating func clearSignInfo() {
    return _signInfo = nil
  }

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_signInfo)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _signInfo ?? "", protoFieldNumber: 2)
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Buddy_IMChangeSignInfoReq) -> Bool {
    if (userId != other.userId) {return false}
    if (signInfo != other.signInfo) {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Buddy_IMChangeSignInfoRsp: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Buddy_IMChangeSignInfoRsp"}
  public var protoMessageName: String {return "IMChangeSignInfoRsp"}
  public var protoPackageName: String {return "IM.Buddy"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "result_code", json: "resultCode", swift: "resultCode"),
    3: .unique(proto: "sign_info", json: "signInfo", swift: "signInfo"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:		0x0214
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _resultCode: UInt32? = nil
  var resultCode: UInt32 {
    get {return _resultCode ?? 0}
    set {_resultCode = newValue}
  }
  public var hasResultCode: Bool {
    return _resultCode != nil
  }
  public mutating func clearResultCode() {
    return _resultCode = nil
  }

  ///   此字段服务端用，客户端直接忽略
  private var _signInfo: String? = nil
  var signInfo: String {
    get {return _signInfo ?? ""}
    set {_signInfo = newValue}
  }
  public var hasSignInfo: Bool {
    return _signInfo != nil
  }
  public mutating func clearSignInfo() {
    return _signInfo = nil
  }

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_resultCode)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_signInfo)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _resultCode ?? 0, protoFieldNumber: 2)
    if let v = _signInfo {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 3)
    }
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Buddy_IMChangeSignInfoRsp) -> Bool {
    if (userId != other.userId) {return false}
    if (resultCode != other.resultCode) {return false}
    if (signInfo != other.signInfo) {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

///   个性签名修改通知（广播）
struct IM_Buddy_IMSignInfoChangedNotify: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Buddy_IMSignInfoChangedNotify"}
  public var protoMessageName: String {return "IMSignInfoChangedNotify"}
  public var protoPackageName: String {return "IM.Buddy"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "changed_user_id", json: "changedUserId", swift: "changedUserId"),
    2: .unique(proto: "sign_info", json: "signInfo", swift: "signInfo"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:		0x0215
  private var _changedUserId: UInt32? = nil
  var changedUserId: UInt32 {
    get {return _changedUserId ?? 0}
    set {_changedUserId = newValue}
  }
  public var hasChangedUserId: Bool {
    return _changedUserId != nil
  }
  public mutating func clearChangedUserId() {
    return _changedUserId = nil
  }

  private var _signInfo: String? = nil
  var signInfo: String {
    get {return _signInfo ?? ""}
    set {_signInfo = newValue}
  }
  public var hasSignInfo: Bool {
    return _signInfo != nil
  }
  public mutating func clearSignInfo() {
    return _signInfo = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_changedUserId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_signInfo)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _changedUserId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _signInfo ?? "", protoFieldNumber: 2)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Buddy_IMSignInfoChangedNotify) -> Bool {
    if (changedUserId != other.changedUserId) {return false}
    if (signInfo != other.signInfo) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}
