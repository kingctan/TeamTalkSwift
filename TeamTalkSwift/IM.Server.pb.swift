/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: IM.Server.proto
 *
 */

import Foundation
import SwiftProtobuf


// service id:   0x0007

///  db_proxy
struct IM_Server_IMStopReceivePacket: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Server_IMStopReceivePacket"}
  public var protoMessageName: String {return "IMStopReceivePacket"}
  public var protoPackageName: String {return "IM.Server"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "result", swift: "result"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:   0x0702
  private var _result: UInt32? = nil
  var result: UInt32 {
    get {return _result ?? 0}
    set {_result = newValue}
  }
  public var hasResult: Bool {
    return _result != nil
  }
  public mutating func clearResult() {
    return _result = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_result)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _result ?? 0, protoFieldNumber: 1)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Server_IMStopReceivePacket) -> Bool {
    if (result != other.result) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

///  db_proxy
struct IM_Server_IMValidateReq: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Server_IMValidateReq"}
  public var protoMessageName: String {return "IMValidateReq"}
  public var protoPackageName: String {return "IM.Server"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_name", json: "userName", swift: "userName"),
    2: .same(proto: "password", swift: "password"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:	0x0703
  private var _userName: String? = nil
  var userName: String {
    get {return _userName ?? ""}
    set {_userName = newValue}
  }
  public var hasUserName: Bool {
    return _userName != nil
  }
  public mutating func clearUserName() {
    return _userName = nil
  }

  private var _password: String? = nil
  var password: String {
    get {return _password ?? ""}
    set {_password = newValue}
  }
  public var hasPassword: Bool {
    return _password != nil
  }
  public mutating func clearPassword() {
    return _password = nil
  }

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_userName)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_password)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _userName ?? "", protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _password ?? "", protoFieldNumber: 2)
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Server_IMValidateReq) -> Bool {
    if (userName != other.userName) {return false}
    if (password != other.password) {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

///  db_proxy
struct IM_Server_IMValidateRsp: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Server_IMValidateRsp"}
  public var protoMessageName: String {return "IMValidateRsp"}
  public var protoPackageName: String {return "IM.Server"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_name", json: "userName", swift: "userName"),
    2: .unique(proto: "result_code", json: "resultCode", swift: "resultCode"),
    3: .unique(proto: "result_string", json: "resultString", swift: "resultString"),
    4: .unique(proto: "user_info", json: "userInfo", swift: "userInfo"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = IM_Server_IMValidateRsp
    var unknown = SwiftProtobuf.UnknownStorage()
    var _userName: String? = nil
    var _resultCode: UInt32? = nil
    var _resultString: String? = nil
    var _userInfo: IM_BaseDefine_UserInfo? = nil
    var _attachData: Data? = nil

    init() {}

    func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_userName)
      case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_resultCode)
      case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_resultString)
      case 4: try setter.decodeSingularMessageField(fieldType: IM_BaseDefine_UserInfo.self, value: &_userInfo)
      case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
      default: break
      }
    }

    func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _userName ?? "", protoFieldNumber: 1)
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _resultCode ?? 0, protoFieldNumber: 2)
      if let v = _resultString {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 3)
      }
      if let v = _userInfo {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 4)
      }
      if let v = _attachData {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if (_userName != other._userName) {return false}
      if (_resultCode != other._resultCode) {return false}
      if (_resultString != other._resultString) {return false}
      if ((_userInfo != nil || other._userInfo != nil) && (_userInfo == nil || other._userInfo == nil || _userInfo! != other._userInfo!)) {return false}
      if (_attachData != other._attachData) {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._userName = _userName
      clone._resultCode = _resultCode
      clone._resultString = _resultString
      clone._userInfo = _userInfo
      clone._attachData = _attachData
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var unknown: SwiftProtobuf.UnknownStorage {
    get {return _storage.unknown}
    set {_storage.unknown = newValue}
  }

  ///  cmd id:	0x0704
  var userName: String {
    get {return _storage._userName ?? ""}
    set {_uniqueStorage()._userName = newValue}
  }
  public var hasUserName: Bool {
    return _storage._userName != nil
  }
  public mutating func clearUserName() {
    return _storage._userName = nil
  }

  var resultCode: UInt32 {
    get {return _storage._resultCode ?? 0}
    set {_uniqueStorage()._resultCode = newValue}
  }
  public var hasResultCode: Bool {
    return _storage._resultCode != nil
  }
  public mutating func clearResultCode() {
    return _storage._resultCode = nil
  }

  var resultString: String {
    get {return _storage._resultString ?? ""}
    set {_uniqueStorage()._resultString = newValue}
  }
  public var hasResultString: Bool {
    return _storage._resultString != nil
  }
  public mutating func clearResultString() {
    return _storage._resultString = nil
  }

  var userInfo: IM_BaseDefine_UserInfo {
    get {return _storage._userInfo ?? IM_BaseDefine_UserInfo()}
    set {_uniqueStorage()._userInfo = newValue}
  }
  public var hasUserInfo: Bool {
    return _storage._userInfo != nil
  }
  public mutating func clearUserInfo() {
    return _storage._userInfo = nil
  }

  var attachData: Data {
    get {return _storage._attachData ?? Data()}
    set {_uniqueStorage()._attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _storage._attachData != nil
  }
  public mutating func clearAttachData() {
    return _storage._attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Server_IMValidateRsp) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///  db_proxy
struct IM_Server_IMGetDeviceTokenReq: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Server_IMGetDeviceTokenReq"}
  public var protoMessageName: String {return "IMGetDeviceTokenReq"}
  public var protoPackageName: String {return "IM.Server"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:	0x0705
  var userId: [UInt32] = []

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &userId)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if !userId.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: userId, protoFieldNumber: 1)
    }
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Server_IMGetDeviceTokenReq) -> Bool {
    if userId != other.userId {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

///  db_proxy
struct IM_Server_IMGetDeviceTokenRsp: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Server_IMGetDeviceTokenRsp"}
  public var protoMessageName: String {return "IMGetDeviceTokenRsp"}
  public var protoPackageName: String {return "IM.Server"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_token_info", json: "userTokenInfo", swift: "userTokenInfo"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:	0x0706
  var userTokenInfo: [IM_BaseDefine_UserTokenInfo] = []

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeRepeatedMessageField(fieldType: IM_BaseDefine_UserTokenInfo.self, value: &userTokenInfo)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if !userTokenInfo.isEmpty {
      try visitor.visitRepeatedMessageField(value: userTokenInfo, protoFieldNumber: 1)
    }
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Server_IMGetDeviceTokenRsp) -> Bool {
    if userTokenInfo != other.userTokenInfo {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Server_IMRoleSet: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Server_IMRoleSet"}
  public var protoMessageName: String {return "IMRoleSet"}
  public var protoPackageName: String {return "IM.Server"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "master", swift: "master"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:	0x0707
  private var _master: UInt32? = nil
  var master: UInt32 {
    get {return _master ?? 0}
    set {_master = newValue}
  }
  public var hasMaster: Bool {
    return _master != nil
  }
  public mutating func clearMaster() {
    return _master = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_master)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _master ?? 0, protoFieldNumber: 1)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Server_IMRoleSet) -> Bool {
    if (master != other.master) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Server_IMOnlineUserInfo: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Server_IMOnlineUserInfo"}
  public var protoMessageName: String {return "IMOnlineUserInfo"}
  public var protoPackageName: String {return "IM.Server"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_stat_list", json: "userStatList", swift: "userStatList"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:	0x0708
  var userStatList: [IM_BaseDefine_ServerUserStat] = []

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeRepeatedMessageField(fieldType: IM_BaseDefine_ServerUserStat.self, value: &userStatList)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if !userStatList.isEmpty {
      try visitor.visitRepeatedMessageField(value: userStatList, protoFieldNumber: 1)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Server_IMOnlineUserInfo) -> Bool {
    if userStatList != other.userStatList {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Server_IMMsgServInfo: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Server_IMMsgServInfo"}
  public var protoMessageName: String {return "IMMsgServInfo"}
  public var protoPackageName: String {return "IM.Server"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "ip1", swift: "ip1"),
    2: .same(proto: "ip2", swift: "ip2"),
    3: .same(proto: "port", swift: "port"),
    4: .unique(proto: "max_conn_cnt", json: "maxConnCnt", swift: "maxConnCnt"),
    5: .unique(proto: "cur_conn_cnt", json: "curConnCnt", swift: "curConnCnt"),
    6: .unique(proto: "host_name", json: "hostName", swift: "hostName"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:	0x0709
  private var _ip1: String? = nil
  var ip1: String {
    get {return _ip1 ?? ""}
    set {_ip1 = newValue}
  }
  public var hasIp1: Bool {
    return _ip1 != nil
  }
  public mutating func clearIp1() {
    return _ip1 = nil
  }

  private var _ip2: String? = nil
  var ip2: String {
    get {return _ip2 ?? ""}
    set {_ip2 = newValue}
  }
  public var hasIp2: Bool {
    return _ip2 != nil
  }
  public mutating func clearIp2() {
    return _ip2 = nil
  }

  private var _port: UInt32? = nil
  var port: UInt32 {
    get {return _port ?? 0}
    set {_port = newValue}
  }
  public var hasPort: Bool {
    return _port != nil
  }
  public mutating func clearPort() {
    return _port = nil
  }

  private var _maxConnCnt: UInt32? = nil
  var maxConnCnt: UInt32 {
    get {return _maxConnCnt ?? 0}
    set {_maxConnCnt = newValue}
  }
  public var hasMaxConnCnt: Bool {
    return _maxConnCnt != nil
  }
  public mutating func clearMaxConnCnt() {
    return _maxConnCnt = nil
  }

  private var _curConnCnt: UInt32? = nil
  var curConnCnt: UInt32 {
    get {return _curConnCnt ?? 0}
    set {_curConnCnt = newValue}
  }
  public var hasCurConnCnt: Bool {
    return _curConnCnt != nil
  }
  public mutating func clearCurConnCnt() {
    return _curConnCnt = nil
  }

  private var _hostName: String? = nil
  var hostName: String {
    get {return _hostName ?? ""}
    set {_hostName = newValue}
  }
  public var hasHostName: Bool {
    return _hostName != nil
  }
  public mutating func clearHostName() {
    return _hostName = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_ip1)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_ip2)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_port)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_maxConnCnt)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_curConnCnt)
    case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_hostName)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _ip1 ?? "", protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _ip2 ?? "", protoFieldNumber: 2)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _port ?? 0, protoFieldNumber: 3)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _maxConnCnt ?? 0, protoFieldNumber: 4)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _curConnCnt ?? 0, protoFieldNumber: 5)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _hostName ?? "", protoFieldNumber: 6)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Server_IMMsgServInfo) -> Bool {
    if (ip1 != other.ip1) {return false}
    if (ip2 != other.ip2) {return false}
    if (port != other.port) {return false}
    if (maxConnCnt != other.maxConnCnt) {return false}
    if (curConnCnt != other.curConnCnt) {return false}
    if (hostName != other.hostName) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Server_IMUserStatusUpdate: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Server_IMUserStatusUpdate"}
  public var protoMessageName: String {return "IMUserStatusUpdate"}
  public var protoPackageName: String {return "IM.Server"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_status", json: "userStatus", swift: "userStatus"),
    2: .unique(proto: "user_id", json: "userId", swift: "userId"),
    3: .unique(proto: "client_type", json: "clientType", swift: "clientType"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:	0x070a
  private var _userStatus: UInt32? = nil
  var userStatus: UInt32 {
    get {return _userStatus ?? 0}
    set {_userStatus = newValue}
  }
  public var hasUserStatus: Bool {
    return _userStatus != nil
  }
  public mutating func clearUserStatus() {
    return _userStatus = nil
  }

  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _clientType: IM_BaseDefine_ClientType? = nil
  var clientType: IM_BaseDefine_ClientType {
    get {return _clientType ?? IM_BaseDefine_ClientType.windows}
    set {_clientType = newValue}
  }
  public var hasClientType: Bool {
    return _clientType != nil
  }
  public mutating func clearClientType() {
    return _clientType = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userStatus)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 3: try setter.decodeSingularField(fieldType: IM_BaseDefine_ClientType.self, value: &_clientType)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userStatus ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 2)
    try visitor.visitSingularField(fieldType: IM_BaseDefine_ClientType.self, value: _clientType ?? IM_BaseDefine_ClientType.windows, protoFieldNumber: 3)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Server_IMUserStatusUpdate) -> Bool {
    if (userStatus != other.userStatus) {return false}
    if (userId != other.userId) {return false}
    if (clientType != other.clientType) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Server_IMUserCntUpdate: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Server_IMUserCntUpdate"}
  public var protoMessageName: String {return "IMUserCntUpdate"}
  public var protoPackageName: String {return "IM.Server"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_action", json: "userAction", swift: "userAction"),
    2: .unique(proto: "user_id", json: "userId", swift: "userId"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:	0x070b
  private var _userAction: UInt32? = nil
  var userAction: UInt32 {
    get {return _userAction ?? 0}
    set {_userAction = newValue}
  }
  public var hasUserAction: Bool {
    return _userAction != nil
  }
  public mutating func clearUserAction() {
    return _userAction = nil
  }

  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userAction)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userAction ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 2)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Server_IMUserCntUpdate) -> Bool {
    if (userAction != other.userAction) {return false}
    if (userId != other.userId) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Server_IMServerKickUser: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Server_IMServerKickUser"}
  public var protoMessageName: String {return "IMServerKickUser"}
  public var protoPackageName: String {return "IM.Server"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "client_type", json: "clientType", swift: "clientType"),
    3: .same(proto: "reason", swift: "reason"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:	0x070d
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _clientType: IM_BaseDefine_ClientType? = nil
  var clientType: IM_BaseDefine_ClientType {
    get {return _clientType ?? IM_BaseDefine_ClientType.windows}
    set {_clientType = newValue}
  }
  public var hasClientType: Bool {
    return _clientType != nil
  }
  public mutating func clearClientType() {
    return _clientType = nil
  }

  ///  KICK_REASON_DUPLICATE_USER = 1;
  private var _reason: UInt32? = nil
  var reason: UInt32 {
    get {return _reason ?? 0}
    set {_reason = newValue}
  }
  public var hasReason: Bool {
    return _reason != nil
  }
  public mutating func clearReason() {
    return _reason = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: IM_BaseDefine_ClientType.self, value: &_clientType)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_reason)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: IM_BaseDefine_ClientType.self, value: _clientType ?? IM_BaseDefine_ClientType.windows, protoFieldNumber: 2)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _reason ?? 0, protoFieldNumber: 3)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Server_IMServerKickUser) -> Bool {
    if (userId != other.userId) {return false}
    if (clientType != other.clientType) {return false}
    if (reason != other.reason) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Server_IMServerPCLoginStatusNotify: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Server_IMServerPCLoginStatusNotify"}
  public var protoMessageName: String {return "IMServerPCLoginStatusNotify"}
  public var protoPackageName: String {return "IM.Server"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "login_status", json: "loginStatus", swift: "loginStatus"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:	0x070e
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  ///  1: on   0: off
  private var _loginStatus: UInt32? = nil
  var loginStatus: UInt32 {
    get {return _loginStatus ?? 0}
    set {_loginStatus = newValue}
  }
  public var hasLoginStatus: Bool {
    return _loginStatus != nil
  }
  public mutating func clearLoginStatus() {
    return _loginStatus = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_loginStatus)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _loginStatus ?? 0, protoFieldNumber: 2)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Server_IMServerPCLoginStatusNotify) -> Bool {
    if (userId != other.userId) {return false}
    if (loginStatus != other.loginStatus) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Server_IMPushToUserReq: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Server_IMPushToUserReq"}
  public var protoMessageName: String {return "IMPushToUserReq"}
  public var protoPackageName: String {return "IM.Server"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "flash", swift: "flash"),
    2: .same(proto: "data", swift: "data"),
    3: .unique(proto: "user_token_list", json: "userTokenList", swift: "userTokenList"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:	0x070f
  private var _flash: String? = nil
  var flash: String {
    get {return _flash ?? ""}
    set {_flash = newValue}
  }
  public var hasFlash: Bool {
    return _flash != nil
  }
  public mutating func clearFlash() {
    return _flash = nil
  }

  private var _data: String? = nil
  var data: String {
    get {return _data ?? ""}
    set {_data = newValue}
  }
  public var hasData: Bool {
    return _data != nil
  }
  public mutating func clearData() {
    return _data = nil
  }

  var userTokenList: [IM_BaseDefine_UserTokenInfo] = []

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_flash)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_data)
    case 3: try setter.decodeRepeatedMessageField(fieldType: IM_BaseDefine_UserTokenInfo.self, value: &userTokenList)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _flash ?? "", protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _data ?? "", protoFieldNumber: 2)
    if !userTokenList.isEmpty {
      try visitor.visitRepeatedMessageField(value: userTokenList, protoFieldNumber: 3)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Server_IMPushToUserReq) -> Bool {
    if (flash != other.flash) {return false}
    if (data != other.data) {return false}
    if userTokenList != other.userTokenList {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Server_IMPushToUserRsp: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Server_IMPushToUserRsp"}
  public var protoMessageName: String {return "IMPushToUserRsp"}
  public var protoPackageName: String {return "IM.Server"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "push_result_list", json: "pushResultList", swift: "pushResultList"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:	0x0710
  var pushResultList: [IM_BaseDefine_PushResult] = []

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeRepeatedMessageField(fieldType: IM_BaseDefine_PushResult.self, value: &pushResultList)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if !pushResultList.isEmpty {
      try visitor.visitRepeatedMessageField(value: pushResultList, protoFieldNumber: 1)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Server_IMPushToUserRsp) -> Bool {
    if pushResultList != other.pushResultList {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Server_IMGroupGetShieldReq: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Server_IMGroupGetShieldReq"}
  public var protoMessageName: String {return "IMGroupGetShieldReq"}
  public var protoPackageName: String {return "IM.Server"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "group_id", json: "groupId", swift: "groupId"),
    2: .unique(proto: "user_id", json: "userId", swift: "userId"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:			0x0711
  private var _groupId: UInt32? = nil
  var groupId: UInt32 {
    get {return _groupId ?? 0}
    set {_groupId = newValue}
  }
  public var hasGroupId: Bool {
    return _groupId != nil
  }
  public mutating func clearGroupId() {
    return _groupId = nil
  }

  var userId: [UInt32] = []

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_groupId)
    case 2: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &userId)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _groupId ?? 0, protoFieldNumber: 1)
    if !userId.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: userId, protoFieldNumber: 2)
    }
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Server_IMGroupGetShieldReq) -> Bool {
    if (groupId != other.groupId) {return false}
    if userId != other.userId {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Server_IMGroupGetShieldRsp: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Server_IMGroupGetShieldRsp"}
  public var protoMessageName: String {return "IMGroupGetShieldRsp"}
  public var protoPackageName: String {return "IM.Server"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "group_id", json: "groupId", swift: "groupId"),
    2: .unique(proto: "shield_status_list", json: "shieldStatusList", swift: "shieldStatusList"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id: 			0x0712
  private var _groupId: UInt32? = nil
  var groupId: UInt32 {
    get {return _groupId ?? 0}
    set {_groupId = newValue}
  }
  public var hasGroupId: Bool {
    return _groupId != nil
  }
  public mutating func clearGroupId() {
    return _groupId = nil
  }

  var shieldStatusList: [IM_BaseDefine_ShieldStatus] = []

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_groupId)
    case 2: try setter.decodeRepeatedMessageField(fieldType: IM_BaseDefine_ShieldStatus.self, value: &shieldStatusList)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _groupId ?? 0, protoFieldNumber: 1)
    if !shieldStatusList.isEmpty {
      try visitor.visitRepeatedMessageField(value: shieldStatusList, protoFieldNumber: 2)
    }
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Server_IMGroupGetShieldRsp) -> Bool {
    if (groupId != other.groupId) {return false}
    if shieldStatusList != other.shieldStatusList {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Server_IMFileTransferReq: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Server_IMFileTransferReq"}
  public var protoMessageName: String {return "IMFileTransferReq"}
  public var protoPackageName: String {return "IM.Server"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "from_user_id", json: "fromUserId", swift: "fromUserId"),
    2: .unique(proto: "to_user_id", json: "toUserId", swift: "toUserId"),
    3: .unique(proto: "file_name", json: "fileName", swift: "fileName"),
    4: .unique(proto: "file_size", json: "fileSize", swift: "fileSize"),
    5: .unique(proto: "trans_mode", json: "transMode", swift: "transMode"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:			0x0715
  private var _fromUserId: UInt32? = nil
  var fromUserId: UInt32 {
    get {return _fromUserId ?? 0}
    set {_fromUserId = newValue}
  }
  public var hasFromUserId: Bool {
    return _fromUserId != nil
  }
  public mutating func clearFromUserId() {
    return _fromUserId = nil
  }

  private var _toUserId: UInt32? = nil
  var toUserId: UInt32 {
    get {return _toUserId ?? 0}
    set {_toUserId = newValue}
  }
  public var hasToUserId: Bool {
    return _toUserId != nil
  }
  public mutating func clearToUserId() {
    return _toUserId = nil
  }

  private var _fileName: String? = nil
  var fileName: String {
    get {return _fileName ?? ""}
    set {_fileName = newValue}
  }
  public var hasFileName: Bool {
    return _fileName != nil
  }
  public mutating func clearFileName() {
    return _fileName = nil
  }

  private var _fileSize: UInt32? = nil
  var fileSize: UInt32 {
    get {return _fileSize ?? 0}
    set {_fileSize = newValue}
  }
  public var hasFileSize: Bool {
    return _fileSize != nil
  }
  public mutating func clearFileSize() {
    return _fileSize = nil
  }

  private var _transMode: IM_BaseDefine_TransferFileType? = nil
  var transMode: IM_BaseDefine_TransferFileType {
    get {return _transMode ?? IM_BaseDefine_TransferFileType.fileTypeOnline}
    set {_transMode = newValue}
  }
  public var hasTransMode: Bool {
    return _transMode != nil
  }
  public mutating func clearTransMode() {
    return _transMode = nil
  }

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_fromUserId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_toUserId)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_fileName)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_fileSize)
    case 5: try setter.decodeSingularField(fieldType: IM_BaseDefine_TransferFileType.self, value: &_transMode)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _fromUserId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _toUserId ?? 0, protoFieldNumber: 2)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _fileName ?? "", protoFieldNumber: 3)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _fileSize ?? 0, protoFieldNumber: 4)
    try visitor.visitSingularField(fieldType: IM_BaseDefine_TransferFileType.self, value: _transMode ?? IM_BaseDefine_TransferFileType.fileTypeOnline, protoFieldNumber: 5)
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Server_IMFileTransferReq) -> Bool {
    if (fromUserId != other.fromUserId) {return false}
    if (toUserId != other.toUserId) {return false}
    if (fileName != other.fileName) {return false}
    if (fileSize != other.fileSize) {return false}
    if (transMode != other.transMode) {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Server_IMFileTransferRsp: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Server_IMFileTransferRsp"}
  public var protoMessageName: String {return "IMFileTransferRsp"}
  public var protoPackageName: String {return "IM.Server"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "result_code", json: "resultCode", swift: "resultCode"),
    2: .unique(proto: "from_user_id", json: "fromUserId", swift: "fromUserId"),
    3: .unique(proto: "to_user_id", json: "toUserId", swift: "toUserId"),
    4: .unique(proto: "file_name", json: "fileName", swift: "fileName"),
    5: .unique(proto: "file_size", json: "fileSize", swift: "fileSize"),
    6: .unique(proto: "task_id", json: "taskId", swift: "taskId"),
    7: .unique(proto: "trans_mode", json: "transMode", swift: "transMode"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:			0x0716
  private var _resultCode: UInt32? = nil
  var resultCode: UInt32 {
    get {return _resultCode ?? 0}
    set {_resultCode = newValue}
  }
  public var hasResultCode: Bool {
    return _resultCode != nil
  }
  public mutating func clearResultCode() {
    return _resultCode = nil
  }

  private var _fromUserId: UInt32? = nil
  var fromUserId: UInt32 {
    get {return _fromUserId ?? 0}
    set {_fromUserId = newValue}
  }
  public var hasFromUserId: Bool {
    return _fromUserId != nil
  }
  public mutating func clearFromUserId() {
    return _fromUserId = nil
  }

  private var _toUserId: UInt32? = nil
  var toUserId: UInt32 {
    get {return _toUserId ?? 0}
    set {_toUserId = newValue}
  }
  public var hasToUserId: Bool {
    return _toUserId != nil
  }
  public mutating func clearToUserId() {
    return _toUserId = nil
  }

  private var _fileName: String? = nil
  var fileName: String {
    get {return _fileName ?? ""}
    set {_fileName = newValue}
  }
  public var hasFileName: Bool {
    return _fileName != nil
  }
  public mutating func clearFileName() {
    return _fileName = nil
  }

  private var _fileSize: UInt32? = nil
  var fileSize: UInt32 {
    get {return _fileSize ?? 0}
    set {_fileSize = newValue}
  }
  public var hasFileSize: Bool {
    return _fileSize != nil
  }
  public mutating func clearFileSize() {
    return _fileSize = nil
  }

  private var _taskId: String? = nil
  var taskId: String {
    get {return _taskId ?? ""}
    set {_taskId = newValue}
  }
  public var hasTaskId: Bool {
    return _taskId != nil
  }
  public mutating func clearTaskId() {
    return _taskId = nil
  }

  private var _transMode: IM_BaseDefine_TransferFileType? = nil
  var transMode: IM_BaseDefine_TransferFileType {
    get {return _transMode ?? IM_BaseDefine_TransferFileType.fileTypeOnline}
    set {_transMode = newValue}
  }
  public var hasTransMode: Bool {
    return _transMode != nil
  }
  public mutating func clearTransMode() {
    return _transMode = nil
  }

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_resultCode)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_fromUserId)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_toUserId)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_fileName)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_fileSize)
    case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_taskId)
    case 7: try setter.decodeSingularField(fieldType: IM_BaseDefine_TransferFileType.self, value: &_transMode)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _resultCode ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _fromUserId ?? 0, protoFieldNumber: 2)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _toUserId ?? 0, protoFieldNumber: 3)
    if let v = _fileName {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 4)
    }
    if let v = _fileSize {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: v, protoFieldNumber: 5)
    }
    if let v = _taskId {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 6)
    }
    if let v = _transMode {
      try visitor.visitSingularField(fieldType: IM_BaseDefine_TransferFileType.self, value: v, protoFieldNumber: 7)
    }
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Server_IMFileTransferRsp) -> Bool {
    if (resultCode != other.resultCode) {return false}
    if (fromUserId != other.fromUserId) {return false}
    if (toUserId != other.toUserId) {return false}
    if (fileName != other.fileName) {return false}
    if (fileSize != other.fileSize) {return false}
    if (taskId != other.taskId) {return false}
    if (transMode != other.transMode) {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

///  cmd id:			0x0717
struct IM_Server_IMFileServerIPReq: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Server_IMFileServerIPReq"}
  public var protoMessageName: String {return "IMFileServerIPReq"}
  public var protoPackageName: String {return "IM.Server"}
  public static let _protobuf_fieldNames = FieldNameMap()

  public var unknown = SwiftProtobuf.UnknownStorage()

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Server_IMFileServerIPReq) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Server_IMFileServerIPRsp: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Server_IMFileServerIPRsp"}
  public var protoMessageName: String {return "IMFileServerIPRsp"}
  public var protoPackageName: String {return "IM.Server"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "ip_addr_list", json: "ipAddrList", swift: "ipAddrList"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:			0x0718
  var ipAddrList: [IM_BaseDefine_IpAddr] = []

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeRepeatedMessageField(fieldType: IM_BaseDefine_IpAddr.self, value: &ipAddrList)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if !ipAddrList.isEmpty {
      try visitor.visitRepeatedMessageField(value: ipAddrList, protoFieldNumber: 1)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Server_IMFileServerIPRsp) -> Bool {
    if ipAddrList != other.ipAddrList {return false}
    if unknown != other.unknown {return false}
    return true
  }
}
