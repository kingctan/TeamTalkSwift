/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: IM.File.proto
 *
 */

import Foundation
import SwiftProtobuf


struct IM_File_IMFileLoginReq: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_File_IMFileLoginReq"}
  public var protoMessageName: String {return "IMFileLoginReq"}
  public var protoPackageName: String {return "IM.File"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "task_id", json: "taskId", swift: "taskId"),
    3: .unique(proto: "file_role", json: "fileRole", swift: "fileRole"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:	0x0501
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _taskId: String? = nil
  var taskId: String {
    get {return _taskId ?? ""}
    set {_taskId = newValue}
  }
  public var hasTaskId: Bool {
    return _taskId != nil
  }
  public mutating func clearTaskId() {
    return _taskId = nil
  }

  private var _fileRole: IM_BaseDefine_ClientFileRole? = nil
  var fileRole: IM_BaseDefine_ClientFileRole {
    get {return _fileRole ?? IM_BaseDefine_ClientFileRole.clientRealtimeSender}
    set {_fileRole = newValue}
  }
  public var hasFileRole: Bool {
    return _fileRole != nil
  }
  public mutating func clearFileRole() {
    return _fileRole = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_taskId)
    case 3: try setter.decodeSingularField(fieldType: IM_BaseDefine_ClientFileRole.self, value: &_fileRole)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _taskId ?? "", protoFieldNumber: 2)
    try visitor.visitSingularField(fieldType: IM_BaseDefine_ClientFileRole.self, value: _fileRole ?? IM_BaseDefine_ClientFileRole.clientRealtimeSender, protoFieldNumber: 3)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_File_IMFileLoginReq) -> Bool {
    if (userId != other.userId) {return false}
    if (taskId != other.taskId) {return false}
    if (fileRole != other.fileRole) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_File_IMFileLoginRsp: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_File_IMFileLoginRsp"}
  public var protoMessageName: String {return "IMFileLoginRsp"}
  public var protoPackageName: String {return "IM.File"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "result_code", json: "resultCode", swift: "resultCode"),
    2: .unique(proto: "task_id", json: "taskId", swift: "taskId"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:	0x0502
  private var _resultCode: UInt32? = nil
  var resultCode: UInt32 {
    get {return _resultCode ?? 0}
    set {_resultCode = newValue}
  }
  public var hasResultCode: Bool {
    return _resultCode != nil
  }
  public mutating func clearResultCode() {
    return _resultCode = nil
  }

  private var _taskId: String? = nil
  var taskId: String {
    get {return _taskId ?? ""}
    set {_taskId = newValue}
  }
  public var hasTaskId: Bool {
    return _taskId != nil
  }
  public mutating func clearTaskId() {
    return _taskId = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_resultCode)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_taskId)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _resultCode ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _taskId ?? "", protoFieldNumber: 2)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_File_IMFileLoginRsp) -> Bool {
    if (resultCode != other.resultCode) {return false}
    if (taskId != other.taskId) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_File_IMFileState: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_File_IMFileState"}
  public var protoMessageName: String {return "IMFileState"}
  public var protoPackageName: String {return "IM.File"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "state", swift: "state"),
    2: .unique(proto: "task_id", json: "taskId", swift: "taskId"),
    3: .unique(proto: "user_id", json: "userId", swift: "userId"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id: 	0x0503
  private var _state: IM_BaseDefine_ClientFileState? = nil
  var state: IM_BaseDefine_ClientFileState {
    get {return _state ?? IM_BaseDefine_ClientFileState.clientFilePeerReady}
    set {_state = newValue}
  }
  public var hasState: Bool {
    return _state != nil
  }
  public mutating func clearState() {
    return _state = nil
  }

  private var _taskId: String? = nil
  var taskId: String {
    get {return _taskId ?? ""}
    set {_taskId = newValue}
  }
  public var hasTaskId: Bool {
    return _taskId != nil
  }
  public mutating func clearTaskId() {
    return _taskId = nil
  }

  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: IM_BaseDefine_ClientFileState.self, value: &_state)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_taskId)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: IM_BaseDefine_ClientFileState.self, value: _state ?? IM_BaseDefine_ClientFileState.clientFilePeerReady, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _taskId ?? "", protoFieldNumber: 2)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 3)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_File_IMFileState) -> Bool {
    if (state != other.state) {return false}
    if (taskId != other.taskId) {return false}
    if (userId != other.userId) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_File_IMFilePullDataReq: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_File_IMFilePullDataReq"}
  public var protoMessageName: String {return "IMFilePullDataReq"}
  public var protoPackageName: String {return "IM.File"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "task_id", json: "taskId", swift: "taskId"),
    2: .unique(proto: "user_id", json: "userId", swift: "userId"),
    3: .unique(proto: "trans_mode", json: "transMode", swift: "transMode"),
    4: .same(proto: "offset", swift: "offset"),
    5: .unique(proto: "data_size", json: "dataSize", swift: "dataSize"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:	0x0504
  private var _taskId: String? = nil
  var taskId: String {
    get {return _taskId ?? ""}
    set {_taskId = newValue}
  }
  public var hasTaskId: Bool {
    return _taskId != nil
  }
  public mutating func clearTaskId() {
    return _taskId = nil
  }

  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _transMode: IM_BaseDefine_TransferFileType? = nil
  var transMode: IM_BaseDefine_TransferFileType {
    get {return _transMode ?? IM_BaseDefine_TransferFileType.fileTypeOnline}
    set {_transMode = newValue}
  }
  public var hasTransMode: Bool {
    return _transMode != nil
  }
  public mutating func clearTransMode() {
    return _transMode = nil
  }

  private var _offset: UInt32? = nil
  var offset: UInt32 {
    get {return _offset ?? 0}
    set {_offset = newValue}
  }
  public var hasOffset: Bool {
    return _offset != nil
  }
  public mutating func clearOffset() {
    return _offset = nil
  }

  private var _dataSize: UInt32? = nil
  var dataSize: UInt32 {
    get {return _dataSize ?? 0}
    set {_dataSize = newValue}
  }
  public var hasDataSize: Bool {
    return _dataSize != nil
  }
  public mutating func clearDataSize() {
    return _dataSize = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_taskId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 3: try setter.decodeSingularField(fieldType: IM_BaseDefine_TransferFileType.self, value: &_transMode)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_offset)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_dataSize)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _taskId ?? "", protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 2)
    try visitor.visitSingularField(fieldType: IM_BaseDefine_TransferFileType.self, value: _transMode ?? IM_BaseDefine_TransferFileType.fileTypeOnline, protoFieldNumber: 3)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _offset ?? 0, protoFieldNumber: 4)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _dataSize ?? 0, protoFieldNumber: 5)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_File_IMFilePullDataReq) -> Bool {
    if (taskId != other.taskId) {return false}
    if (userId != other.userId) {return false}
    if (transMode != other.transMode) {return false}
    if (offset != other.offset) {return false}
    if (dataSize != other.dataSize) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_File_IMFilePullDataRsp: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_File_IMFilePullDataRsp"}
  public var protoMessageName: String {return "IMFilePullDataRsp"}
  public var protoPackageName: String {return "IM.File"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "result_code", json: "resultCode", swift: "resultCode"),
    2: .unique(proto: "task_id", json: "taskId", swift: "taskId"),
    3: .unique(proto: "user_id", json: "userId", swift: "userId"),
    4: .same(proto: "offset", swift: "offset"),
    5: .unique(proto: "file_data", json: "fileData", swift: "fileData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id: 	0x0505
  private var _resultCode: UInt32? = nil
  var resultCode: UInt32 {
    get {return _resultCode ?? 0}
    set {_resultCode = newValue}
  }
  public var hasResultCode: Bool {
    return _resultCode != nil
  }
  public mutating func clearResultCode() {
    return _resultCode = nil
  }

  private var _taskId: String? = nil
  var taskId: String {
    get {return _taskId ?? ""}
    set {_taskId = newValue}
  }
  public var hasTaskId: Bool {
    return _taskId != nil
  }
  public mutating func clearTaskId() {
    return _taskId = nil
  }

  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _offset: UInt32? = nil
  var offset: UInt32 {
    get {return _offset ?? 0}
    set {_offset = newValue}
  }
  public var hasOffset: Bool {
    return _offset != nil
  }
  public mutating func clearOffset() {
    return _offset = nil
  }

  private var _fileData: Data? = nil
  var fileData: Data {
    get {return _fileData ?? Data()}
    set {_fileData = newValue}
  }
  public var hasFileData: Bool {
    return _fileData != nil
  }
  public mutating func clearFileData() {
    return _fileData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_resultCode)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_taskId)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_offset)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_fileData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _resultCode ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _taskId ?? "", protoFieldNumber: 2)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 3)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _offset ?? 0, protoFieldNumber: 4)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: _fileData ?? Data(), protoFieldNumber: 5)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_File_IMFilePullDataRsp) -> Bool {
    if (resultCode != other.resultCode) {return false}
    if (taskId != other.taskId) {return false}
    if (userId != other.userId) {return false}
    if (offset != other.offset) {return false}
    if (fileData != other.fileData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_File_IMFileReq: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_File_IMFileReq"}
  public var protoMessageName: String {return "IMFileReq"}
  public var protoPackageName: String {return "IM.File"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "from_user_id", json: "fromUserId", swift: "fromUserId"),
    2: .unique(proto: "to_user_id", json: "toUserId", swift: "toUserId"),
    3: .unique(proto: "file_name", json: "fileName", swift: "fileName"),
    4: .unique(proto: "file_size", json: "fileSize", swift: "fileSize"),
    5: .unique(proto: "trans_mode", json: "transMode", swift: "transMode"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id: 	0x0506
  private var _fromUserId: UInt32? = nil
  var fromUserId: UInt32 {
    get {return _fromUserId ?? 0}
    set {_fromUserId = newValue}
  }
  public var hasFromUserId: Bool {
    return _fromUserId != nil
  }
  public mutating func clearFromUserId() {
    return _fromUserId = nil
  }

  private var _toUserId: UInt32? = nil
  var toUserId: UInt32 {
    get {return _toUserId ?? 0}
    set {_toUserId = newValue}
  }
  public var hasToUserId: Bool {
    return _toUserId != nil
  }
  public mutating func clearToUserId() {
    return _toUserId = nil
  }

  private var _fileName: String? = nil
  var fileName: String {
    get {return _fileName ?? ""}
    set {_fileName = newValue}
  }
  public var hasFileName: Bool {
    return _fileName != nil
  }
  public mutating func clearFileName() {
    return _fileName = nil
  }

  private var _fileSize: UInt32? = nil
  var fileSize: UInt32 {
    get {return _fileSize ?? 0}
    set {_fileSize = newValue}
  }
  public var hasFileSize: Bool {
    return _fileSize != nil
  }
  public mutating func clearFileSize() {
    return _fileSize = nil
  }

  private var _transMode: IM_BaseDefine_TransferFileType? = nil
  var transMode: IM_BaseDefine_TransferFileType {
    get {return _transMode ?? IM_BaseDefine_TransferFileType.fileTypeOnline}
    set {_transMode = newValue}
  }
  public var hasTransMode: Bool {
    return _transMode != nil
  }
  public mutating func clearTransMode() {
    return _transMode = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_fromUserId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_toUserId)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_fileName)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_fileSize)
    case 5: try setter.decodeSingularField(fieldType: IM_BaseDefine_TransferFileType.self, value: &_transMode)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _fromUserId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _toUserId ?? 0, protoFieldNumber: 2)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _fileName ?? "", protoFieldNumber: 3)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _fileSize ?? 0, protoFieldNumber: 4)
    try visitor.visitSingularField(fieldType: IM_BaseDefine_TransferFileType.self, value: _transMode ?? IM_BaseDefine_TransferFileType.fileTypeOnline, protoFieldNumber: 5)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_File_IMFileReq) -> Bool {
    if (fromUserId != other.fromUserId) {return false}
    if (toUserId != other.toUserId) {return false}
    if (fileName != other.fileName) {return false}
    if (fileSize != other.fileSize) {return false}
    if (transMode != other.transMode) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_File_IMFileRsp: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_File_IMFileRsp"}
  public var protoMessageName: String {return "IMFileRsp"}
  public var protoPackageName: String {return "IM.File"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "result_code", json: "resultCode", swift: "resultCode"),
    2: .unique(proto: "from_user_id", json: "fromUserId", swift: "fromUserId"),
    3: .unique(proto: "to_user_id", json: "toUserId", swift: "toUserId"),
    4: .unique(proto: "file_name", json: "fileName", swift: "fileName"),
    5: .unique(proto: "task_id", json: "taskId", swift: "taskId"),
    6: .unique(proto: "ip_addr_list", json: "ipAddrList", swift: "ipAddrList"),
    7: .unique(proto: "trans_mode", json: "transMode", swift: "transMode"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id: 	0x0507
  private var _resultCode: UInt32? = nil
  var resultCode: UInt32 {
    get {return _resultCode ?? 0}
    set {_resultCode = newValue}
  }
  public var hasResultCode: Bool {
    return _resultCode != nil
  }
  public mutating func clearResultCode() {
    return _resultCode = nil
  }

  private var _fromUserId: UInt32? = nil
  var fromUserId: UInt32 {
    get {return _fromUserId ?? 0}
    set {_fromUserId = newValue}
  }
  public var hasFromUserId: Bool {
    return _fromUserId != nil
  }
  public mutating func clearFromUserId() {
    return _fromUserId = nil
  }

  private var _toUserId: UInt32? = nil
  var toUserId: UInt32 {
    get {return _toUserId ?? 0}
    set {_toUserId = newValue}
  }
  public var hasToUserId: Bool {
    return _toUserId != nil
  }
  public mutating func clearToUserId() {
    return _toUserId = nil
  }

  private var _fileName: String? = nil
  var fileName: String {
    get {return _fileName ?? ""}
    set {_fileName = newValue}
  }
  public var hasFileName: Bool {
    return _fileName != nil
  }
  public mutating func clearFileName() {
    return _fileName = nil
  }

  private var _taskId: String? = nil
  var taskId: String {
    get {return _taskId ?? ""}
    set {_taskId = newValue}
  }
  public var hasTaskId: Bool {
    return _taskId != nil
  }
  public mutating func clearTaskId() {
    return _taskId = nil
  }

  var ipAddrList: [IM_BaseDefine_IpAddr] = []

  private var _transMode: IM_BaseDefine_TransferFileType? = nil
  var transMode: IM_BaseDefine_TransferFileType {
    get {return _transMode ?? IM_BaseDefine_TransferFileType.fileTypeOnline}
    set {_transMode = newValue}
  }
  public var hasTransMode: Bool {
    return _transMode != nil
  }
  public mutating func clearTransMode() {
    return _transMode = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_resultCode)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_fromUserId)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_toUserId)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_fileName)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_taskId)
    case 6: try setter.decodeRepeatedMessageField(fieldType: IM_BaseDefine_IpAddr.self, value: &ipAddrList)
    case 7: try setter.decodeSingularField(fieldType: IM_BaseDefine_TransferFileType.self, value: &_transMode)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _resultCode ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _fromUserId ?? 0, protoFieldNumber: 2)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _toUserId ?? 0, protoFieldNumber: 3)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _fileName ?? "", protoFieldNumber: 4)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _taskId ?? "", protoFieldNumber: 5)
    if !ipAddrList.isEmpty {
      try visitor.visitRepeatedMessageField(value: ipAddrList, protoFieldNumber: 6)
    }
    try visitor.visitSingularField(fieldType: IM_BaseDefine_TransferFileType.self, value: _transMode ?? IM_BaseDefine_TransferFileType.fileTypeOnline, protoFieldNumber: 7)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_File_IMFileRsp) -> Bool {
    if (resultCode != other.resultCode) {return false}
    if (fromUserId != other.fromUserId) {return false}
    if (toUserId != other.toUserId) {return false}
    if (fileName != other.fileName) {return false}
    if (taskId != other.taskId) {return false}
    if ipAddrList != other.ipAddrList {return false}
    if (transMode != other.transMode) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_File_IMFileNotify: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_File_IMFileNotify"}
  public var protoMessageName: String {return "IMFileNotify"}
  public var protoPackageName: String {return "IM.File"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "from_user_id", json: "fromUserId", swift: "fromUserId"),
    2: .unique(proto: "to_user_id", json: "toUserId", swift: "toUserId"),
    3: .unique(proto: "file_name", json: "fileName", swift: "fileName"),
    4: .unique(proto: "file_size", json: "fileSize", swift: "fileSize"),
    5: .unique(proto: "task_id", json: "taskId", swift: "taskId"),
    6: .unique(proto: "ip_addr_list", json: "ipAddrList", swift: "ipAddrList"),
    7: .unique(proto: "trans_mode", json: "transMode", swift: "transMode"),
    8: .unique(proto: "offline_ready", json: "offlineReady", swift: "offlineReady"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id: 	0x0508
  private var _fromUserId: UInt32? = nil
  var fromUserId: UInt32 {
    get {return _fromUserId ?? 0}
    set {_fromUserId = newValue}
  }
  public var hasFromUserId: Bool {
    return _fromUserId != nil
  }
  public mutating func clearFromUserId() {
    return _fromUserId = nil
  }

  private var _toUserId: UInt32? = nil
  var toUserId: UInt32 {
    get {return _toUserId ?? 0}
    set {_toUserId = newValue}
  }
  public var hasToUserId: Bool {
    return _toUserId != nil
  }
  public mutating func clearToUserId() {
    return _toUserId = nil
  }

  private var _fileName: String? = nil
  var fileName: String {
    get {return _fileName ?? ""}
    set {_fileName = newValue}
  }
  public var hasFileName: Bool {
    return _fileName != nil
  }
  public mutating func clearFileName() {
    return _fileName = nil
  }

  private var _fileSize: UInt32? = nil
  var fileSize: UInt32 {
    get {return _fileSize ?? 0}
    set {_fileSize = newValue}
  }
  public var hasFileSize: Bool {
    return _fileSize != nil
  }
  public mutating func clearFileSize() {
    return _fileSize = nil
  }

  private var _taskId: String? = nil
  var taskId: String {
    get {return _taskId ?? ""}
    set {_taskId = newValue}
  }
  public var hasTaskId: Bool {
    return _taskId != nil
  }
  public mutating func clearTaskId() {
    return _taskId = nil
  }

  var ipAddrList: [IM_BaseDefine_IpAddr] = []

  private var _transMode: IM_BaseDefine_TransferFileType? = nil
  var transMode: IM_BaseDefine_TransferFileType {
    get {return _transMode ?? IM_BaseDefine_TransferFileType.fileTypeOnline}
    set {_transMode = newValue}
  }
  public var hasTransMode: Bool {
    return _transMode != nil
  }
  public mutating func clearTransMode() {
    return _transMode = nil
  }

  ///  1:True 0:False
  private var _offlineReady: UInt32? = nil
  var offlineReady: UInt32 {
    get {return _offlineReady ?? 0}
    set {_offlineReady = newValue}
  }
  public var hasOfflineReady: Bool {
    return _offlineReady != nil
  }
  public mutating func clearOfflineReady() {
    return _offlineReady = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_fromUserId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_toUserId)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_fileName)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_fileSize)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_taskId)
    case 6: try setter.decodeRepeatedMessageField(fieldType: IM_BaseDefine_IpAddr.self, value: &ipAddrList)
    case 7: try setter.decodeSingularField(fieldType: IM_BaseDefine_TransferFileType.self, value: &_transMode)
    case 8: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_offlineReady)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _fromUserId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _toUserId ?? 0, protoFieldNumber: 2)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _fileName ?? "", protoFieldNumber: 3)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _fileSize ?? 0, protoFieldNumber: 4)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _taskId ?? "", protoFieldNumber: 5)
    if !ipAddrList.isEmpty {
      try visitor.visitRepeatedMessageField(value: ipAddrList, protoFieldNumber: 6)
    }
    try visitor.visitSingularField(fieldType: IM_BaseDefine_TransferFileType.self, value: _transMode ?? IM_BaseDefine_TransferFileType.fileTypeOnline, protoFieldNumber: 7)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _offlineReady ?? 0, protoFieldNumber: 8)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_File_IMFileNotify) -> Bool {
    if (fromUserId != other.fromUserId) {return false}
    if (toUserId != other.toUserId) {return false}
    if (fileName != other.fileName) {return false}
    if (fileSize != other.fileSize) {return false}
    if (taskId != other.taskId) {return false}
    if ipAddrList != other.ipAddrList {return false}
    if (transMode != other.transMode) {return false}
    if (offlineReady != other.offlineReady) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_File_IMFileHasOfflineReq: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_File_IMFileHasOfflineReq"}
  public var protoMessageName: String {return "IMFileHasOfflineReq"}
  public var protoPackageName: String {return "IM.File"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id: 	0x0509
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_File_IMFileHasOfflineReq) -> Bool {
    if (userId != other.userId) {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_File_IMFileHasOfflineRsp: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_File_IMFileHasOfflineRsp"}
  public var protoMessageName: String {return "IMFileHasOfflineRsp"}
  public var protoPackageName: String {return "IM.File"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "offline_file_list", json: "offlineFileList", swift: "offlineFileList"),
    3: .unique(proto: "ip_addr_list", json: "ipAddrList", swift: "ipAddrList"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:	0x050a
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  var offlineFileList: [IM_BaseDefine_OfflineFileInfo] = []

  var ipAddrList: [IM_BaseDefine_IpAddr] = []

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeRepeatedMessageField(fieldType: IM_BaseDefine_OfflineFileInfo.self, value: &offlineFileList)
    case 3: try setter.decodeRepeatedMessageField(fieldType: IM_BaseDefine_IpAddr.self, value: &ipAddrList)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    if !offlineFileList.isEmpty {
      try visitor.visitRepeatedMessageField(value: offlineFileList, protoFieldNumber: 2)
    }
    if !ipAddrList.isEmpty {
      try visitor.visitRepeatedMessageField(value: ipAddrList, protoFieldNumber: 3)
    }
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_File_IMFileHasOfflineRsp) -> Bool {
    if (userId != other.userId) {return false}
    if offlineFileList != other.offlineFileList {return false}
    if ipAddrList != other.ipAddrList {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_File_IMFileAddOfflineReq: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_File_IMFileAddOfflineReq"}
  public var protoMessageName: String {return "IMFileAddOfflineReq"}
  public var protoPackageName: String {return "IM.File"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "from_user_id", json: "fromUserId", swift: "fromUserId"),
    2: .unique(proto: "to_user_id", json: "toUserId", swift: "toUserId"),
    3: .unique(proto: "task_id", json: "taskId", swift: "taskId"),
    4: .unique(proto: "file_name", json: "fileName", swift: "fileName"),
    5: .unique(proto: "file_size", json: "fileSize", swift: "fileSize"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:	0x050b
  private var _fromUserId: UInt32? = nil
  var fromUserId: UInt32 {
    get {return _fromUserId ?? 0}
    set {_fromUserId = newValue}
  }
  public var hasFromUserId: Bool {
    return _fromUserId != nil
  }
  public mutating func clearFromUserId() {
    return _fromUserId = nil
  }

  private var _toUserId: UInt32? = nil
  var toUserId: UInt32 {
    get {return _toUserId ?? 0}
    set {_toUserId = newValue}
  }
  public var hasToUserId: Bool {
    return _toUserId != nil
  }
  public mutating func clearToUserId() {
    return _toUserId = nil
  }

  private var _taskId: String? = nil
  var taskId: String {
    get {return _taskId ?? ""}
    set {_taskId = newValue}
  }
  public var hasTaskId: Bool {
    return _taskId != nil
  }
  public mutating func clearTaskId() {
    return _taskId = nil
  }

  private var _fileName: String? = nil
  var fileName: String {
    get {return _fileName ?? ""}
    set {_fileName = newValue}
  }
  public var hasFileName: Bool {
    return _fileName != nil
  }
  public mutating func clearFileName() {
    return _fileName = nil
  }

  private var _fileSize: UInt32? = nil
  var fileSize: UInt32 {
    get {return _fileSize ?? 0}
    set {_fileSize = newValue}
  }
  public var hasFileSize: Bool {
    return _fileSize != nil
  }
  public mutating func clearFileSize() {
    return _fileSize = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_fromUserId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_toUserId)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_taskId)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_fileName)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_fileSize)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _fromUserId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _toUserId ?? 0, protoFieldNumber: 2)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _taskId ?? "", protoFieldNumber: 3)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _fileName ?? "", protoFieldNumber: 4)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _fileSize ?? 0, protoFieldNumber: 5)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_File_IMFileAddOfflineReq) -> Bool {
    if (fromUserId != other.fromUserId) {return false}
    if (toUserId != other.toUserId) {return false}
    if (taskId != other.taskId) {return false}
    if (fileName != other.fileName) {return false}
    if (fileSize != other.fileSize) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_File_IMFileDelOfflineReq: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_File_IMFileDelOfflineReq"}
  public var protoMessageName: String {return "IMFileDelOfflineReq"}
  public var protoPackageName: String {return "IM.File"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "from_user_id", json: "fromUserId", swift: "fromUserId"),
    2: .unique(proto: "to_user_id", json: "toUserId", swift: "toUserId"),
    3: .unique(proto: "task_id", json: "taskId", swift: "taskId"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:	0x050c
  private var _fromUserId: UInt32? = nil
  var fromUserId: UInt32 {
    get {return _fromUserId ?? 0}
    set {_fromUserId = newValue}
  }
  public var hasFromUserId: Bool {
    return _fromUserId != nil
  }
  public mutating func clearFromUserId() {
    return _fromUserId = nil
  }

  private var _toUserId: UInt32? = nil
  var toUserId: UInt32 {
    get {return _toUserId ?? 0}
    set {_toUserId = newValue}
  }
  public var hasToUserId: Bool {
    return _toUserId != nil
  }
  public mutating func clearToUserId() {
    return _toUserId = nil
  }

  private var _taskId: String? = nil
  var taskId: String {
    get {return _taskId ?? ""}
    set {_taskId = newValue}
  }
  public var hasTaskId: Bool {
    return _taskId != nil
  }
  public mutating func clearTaskId() {
    return _taskId = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_fromUserId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_toUserId)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_taskId)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _fromUserId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _toUserId ?? 0, protoFieldNumber: 2)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _taskId ?? "", protoFieldNumber: 3)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_File_IMFileDelOfflineReq) -> Bool {
    if (fromUserId != other.fromUserId) {return false}
    if (toUserId != other.toUserId) {return false}
    if (taskId != other.taskId) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}
