/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: IM.Message.proto
 *
 */

import Foundation
import SwiftProtobuf


///  service id  0x0003
struct IM_Message_IMMsgData: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Message_IMMsgData"}
  public var protoMessageName: String {return "IMMsgData"}
  public var protoPackageName: String {return "IM.Message"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "from_user_id", json: "fromUserId", swift: "fromUserId"),
    2: .unique(proto: "to_session_id", json: "toSessionId", swift: "toSessionId"),
    3: .unique(proto: "msg_id", json: "msgId", swift: "msgId"),
    4: .unique(proto: "create_time", json: "createTime", swift: "createTime"),
    5: .unique(proto: "msg_type", json: "msgType", swift: "msgType"),
    6: .unique(proto: "msg_data", json: "msgData", swift: "msgData"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:		0x0301
  private var _fromUserId: UInt32? = nil
  var fromUserId: UInt32 {
    get {return _fromUserId ?? 0}
    set {_fromUserId = newValue}
  }
  public var hasFromUserId: Bool {
    return _fromUserId != nil
  }
  public mutating func clearFromUserId() {
    return _fromUserId = nil
  }

  ///  消息接受方
  private var _toSessionId: UInt32? = nil
  var toSessionId: UInt32 {
    get {return _toSessionId ?? 0}
    set {_toSessionId = newValue}
  }
  public var hasToSessionId: Bool {
    return _toSessionId != nil
  }
  public mutating func clearToSessionId() {
    return _toSessionId = nil
  }

  private var _msgId: UInt32? = nil
  var msgId: UInt32 {
    get {return _msgId ?? 0}
    set {_msgId = newValue}
  }
  public var hasMsgId: Bool {
    return _msgId != nil
  }
  public mutating func clearMsgId() {
    return _msgId = nil
  }

  private var _createTime: UInt32? = nil
  var createTime: UInt32 {
    get {return _createTime ?? 0}
    set {_createTime = newValue}
  }
  public var hasCreateTime: Bool {
    return _createTime != nil
  }
  public mutating func clearCreateTime() {
    return _createTime = nil
  }

  private var _msgType: IM_BaseDefine_MsgType? = nil
  var msgType: IM_BaseDefine_MsgType {
    get {return _msgType ?? IM_BaseDefine_MsgType.singleText}
    set {_msgType = newValue}
  }
  public var hasMsgType: Bool {
    return _msgType != nil
  }
  public mutating func clearMsgType() {
    return _msgType = nil
  }

  private var _msgData: Data? = nil
  var msgData: Data {
    get {return _msgData ?? Data()}
    set {_msgData = newValue}
  }
  public var hasMsgData: Bool {
    return _msgData != nil
  }
  public mutating func clearMsgData() {
    return _msgData = nil
  }

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_fromUserId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_toSessionId)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_msgId)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_createTime)
    case 5: try setter.decodeSingularField(fieldType: IM_BaseDefine_MsgType.self, value: &_msgType)
    case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_msgData)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _fromUserId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _toSessionId ?? 0, protoFieldNumber: 2)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _msgId ?? 0, protoFieldNumber: 3)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _createTime ?? 0, protoFieldNumber: 4)
    try visitor.visitSingularField(fieldType: IM_BaseDefine_MsgType.self, value: _msgType ?? IM_BaseDefine_MsgType.singleText, protoFieldNumber: 5)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: _msgData ?? Data(), protoFieldNumber: 6)
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Message_IMMsgData) -> Bool {
    if (fromUserId != other.fromUserId) {return false}
    if (toSessionId != other.toSessionId) {return false}
    if (msgId != other.msgId) {return false}
    if (createTime != other.createTime) {return false}
    if (msgType != other.msgType) {return false}
    if (msgData != other.msgData) {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Message_IMMsgDataAck: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Message_IMMsgDataAck"}
  public var protoMessageName: String {return "IMMsgDataAck"}
  public var protoPackageName: String {return "IM.Message"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "session_id", json: "sessionId", swift: "sessionId"),
    3: .unique(proto: "msg_id", json: "msgId", swift: "msgId"),
    4: .unique(proto: "session_type", json: "sessionType", swift: "sessionType"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:		0x0302
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _sessionId: UInt32? = nil
  var sessionId: UInt32 {
    get {return _sessionId ?? 0}
    set {_sessionId = newValue}
  }
  public var hasSessionId: Bool {
    return _sessionId != nil
  }
  public mutating func clearSessionId() {
    return _sessionId = nil
  }

  private var _msgId: UInt32? = nil
  var msgId: UInt32 {
    get {return _msgId ?? 0}
    set {_msgId = newValue}
  }
  public var hasMsgId: Bool {
    return _msgId != nil
  }
  public mutating func clearMsgId() {
    return _msgId = nil
  }

  private var _sessionType: IM_BaseDefine_SessionType? = nil
  var sessionType: IM_BaseDefine_SessionType {
    get {return _sessionType ?? IM_BaseDefine_SessionType.single}
    set {_sessionType = newValue}
  }
  public var hasSessionType: Bool {
    return _sessionType != nil
  }
  public mutating func clearSessionType() {
    return _sessionType = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_sessionId)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_msgId)
    case 4: try setter.decodeSingularField(fieldType: IM_BaseDefine_SessionType.self, value: &_sessionType)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _sessionId ?? 0, protoFieldNumber: 2)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _msgId ?? 0, protoFieldNumber: 3)
    try visitor.visitSingularField(fieldType: IM_BaseDefine_SessionType.self, value: _sessionType ?? IM_BaseDefine_SessionType.single, protoFieldNumber: 4)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Message_IMMsgDataAck) -> Bool {
    if (userId != other.userId) {return false}
    if (sessionId != other.sessionId) {return false}
    if (msgId != other.msgId) {return false}
    if (sessionType != other.sessionType) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Message_IMMsgDataReadAck: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Message_IMMsgDataReadAck"}
  public var protoMessageName: String {return "IMMsgDataReadAck"}
  public var protoPackageName: String {return "IM.Message"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "session_id", json: "sessionId", swift: "sessionId"),
    3: .unique(proto: "msg_id", json: "msgId", swift: "msgId"),
    4: .unique(proto: "session_type", json: "sessionType", swift: "sessionType"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:		0x0303
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _sessionId: UInt32? = nil
  var sessionId: UInt32 {
    get {return _sessionId ?? 0}
    set {_sessionId = newValue}
  }
  public var hasSessionId: Bool {
    return _sessionId != nil
  }
  public mutating func clearSessionId() {
    return _sessionId = nil
  }

  private var _msgId: UInt32? = nil
  var msgId: UInt32 {
    get {return _msgId ?? 0}
    set {_msgId = newValue}
  }
  public var hasMsgId: Bool {
    return _msgId != nil
  }
  public mutating func clearMsgId() {
    return _msgId = nil
  }

  private var _sessionType: IM_BaseDefine_SessionType? = nil
  var sessionType: IM_BaseDefine_SessionType {
    get {return _sessionType ?? IM_BaseDefine_SessionType.single}
    set {_sessionType = newValue}
  }
  public var hasSessionType: Bool {
    return _sessionType != nil
  }
  public mutating func clearSessionType() {
    return _sessionType = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_sessionId)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_msgId)
    case 4: try setter.decodeSingularField(fieldType: IM_BaseDefine_SessionType.self, value: &_sessionType)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _sessionId ?? 0, protoFieldNumber: 2)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _msgId ?? 0, protoFieldNumber: 3)
    try visitor.visitSingularField(fieldType: IM_BaseDefine_SessionType.self, value: _sessionType ?? IM_BaseDefine_SessionType.single, protoFieldNumber: 4)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Message_IMMsgDataReadAck) -> Bool {
    if (userId != other.userId) {return false}
    if (sessionId != other.sessionId) {return false}
    if (msgId != other.msgId) {return false}
    if (sessionType != other.sessionType) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Message_IMMsgDataReadNotify: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Message_IMMsgDataReadNotify"}
  public var protoMessageName: String {return "IMMsgDataReadNotify"}
  public var protoPackageName: String {return "IM.Message"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "session_id", json: "sessionId", swift: "sessionId"),
    3: .unique(proto: "msg_id", json: "msgId", swift: "msgId"),
    4: .unique(proto: "session_type", json: "sessionType", swift: "sessionType"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:		0x0304
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _sessionId: UInt32? = nil
  var sessionId: UInt32 {
    get {return _sessionId ?? 0}
    set {_sessionId = newValue}
  }
  public var hasSessionId: Bool {
    return _sessionId != nil
  }
  public mutating func clearSessionId() {
    return _sessionId = nil
  }

  private var _msgId: UInt32? = nil
  var msgId: UInt32 {
    get {return _msgId ?? 0}
    set {_msgId = newValue}
  }
  public var hasMsgId: Bool {
    return _msgId != nil
  }
  public mutating func clearMsgId() {
    return _msgId = nil
  }

  private var _sessionType: IM_BaseDefine_SessionType? = nil
  var sessionType: IM_BaseDefine_SessionType {
    get {return _sessionType ?? IM_BaseDefine_SessionType.single}
    set {_sessionType = newValue}
  }
  public var hasSessionType: Bool {
    return _sessionType != nil
  }
  public mutating func clearSessionType() {
    return _sessionType = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_sessionId)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_msgId)
    case 4: try setter.decodeSingularField(fieldType: IM_BaseDefine_SessionType.self, value: &_sessionType)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _sessionId ?? 0, protoFieldNumber: 2)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _msgId ?? 0, protoFieldNumber: 3)
    try visitor.visitSingularField(fieldType: IM_BaseDefine_SessionType.self, value: _sessionType ?? IM_BaseDefine_SessionType.single, protoFieldNumber: 4)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Message_IMMsgDataReadNotify) -> Bool {
    if (userId != other.userId) {return false}
    if (sessionId != other.sessionId) {return false}
    if (msgId != other.msgId) {return false}
    if (sessionType != other.sessionType) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

///  cmd id:		0x0305
struct IM_Message_IMClientTimeReq: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Message_IMClientTimeReq"}
  public var protoMessageName: String {return "IMClientTimeReq"}
  public var protoPackageName: String {return "IM.Message"}
  public static let _protobuf_fieldNames = FieldNameMap()

  public var unknown = SwiftProtobuf.UnknownStorage()

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Message_IMClientTimeReq) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Message_IMClientTimeRsp: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Message_IMClientTimeRsp"}
  public var protoMessageName: String {return "IMClientTimeRsp"}
  public var protoPackageName: String {return "IM.Message"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "server_time", json: "serverTime", swift: "serverTime"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:		0x0306
  private var _serverTime: UInt32? = nil
  var serverTime: UInt32 {
    get {return _serverTime ?? 0}
    set {_serverTime = newValue}
  }
  public var hasServerTime: Bool {
    return _serverTime != nil
  }
  public mutating func clearServerTime() {
    return _serverTime = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_serverTime)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _serverTime ?? 0, protoFieldNumber: 1)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Message_IMClientTimeRsp) -> Bool {
    if (serverTime != other.serverTime) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Message_IMUnreadMsgCntReq: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Message_IMUnreadMsgCntReq"}
  public var protoMessageName: String {return "IMUnreadMsgCntReq"}
  public var protoPackageName: String {return "IM.Message"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:		0x0307
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Message_IMUnreadMsgCntReq) -> Bool {
    if (userId != other.userId) {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Message_IMUnreadMsgCntRsp: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Message_IMUnreadMsgCntRsp"}
  public var protoMessageName: String {return "IMUnreadMsgCntRsp"}
  public var protoPackageName: String {return "IM.Message"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "total_cnt", json: "totalCnt", swift: "totalCnt"),
    3: .unique(proto: "unreadinfo_list", json: "unreadinfoList", swift: "unreadinfoList"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:		0x0308
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _totalCnt: UInt32? = nil
  var totalCnt: UInt32 {
    get {return _totalCnt ?? 0}
    set {_totalCnt = newValue}
  }
  public var hasTotalCnt: Bool {
    return _totalCnt != nil
  }
  public mutating func clearTotalCnt() {
    return _totalCnt = nil
  }

  var unreadinfoList: [IM_BaseDefine_UnreadInfo] = []

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_totalCnt)
    case 3: try setter.decodeRepeatedMessageField(fieldType: IM_BaseDefine_UnreadInfo.self, value: &unreadinfoList)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _totalCnt ?? 0, protoFieldNumber: 2)
    if !unreadinfoList.isEmpty {
      try visitor.visitRepeatedMessageField(value: unreadinfoList, protoFieldNumber: 3)
    }
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Message_IMUnreadMsgCntRsp) -> Bool {
    if (userId != other.userId) {return false}
    if (totalCnt != other.totalCnt) {return false}
    if unreadinfoList != other.unreadinfoList {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Message_IMGetMsgListReq: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Message_IMGetMsgListReq"}
  public var protoMessageName: String {return "IMGetMsgListReq"}
  public var protoPackageName: String {return "IM.Message"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "session_type", json: "sessionType", swift: "sessionType"),
    3: .unique(proto: "session_id", json: "sessionId", swift: "sessionId"),
    4: .unique(proto: "msg_id_begin", json: "msgIdBegin", swift: "msgIdBegin"),
    5: .unique(proto: "msg_cnt", json: "msgCnt", swift: "msgCnt"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:		0x0309
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _sessionType: IM_BaseDefine_SessionType? = nil
  var sessionType: IM_BaseDefine_SessionType {
    get {return _sessionType ?? IM_BaseDefine_SessionType.single}
    set {_sessionType = newValue}
  }
  public var hasSessionType: Bool {
    return _sessionType != nil
  }
  public mutating func clearSessionType() {
    return _sessionType = nil
  }

  private var _sessionId: UInt32? = nil
  var sessionId: UInt32 {
    get {return _sessionId ?? 0}
    set {_sessionId = newValue}
  }
  public var hasSessionId: Bool {
    return _sessionId != nil
  }
  public mutating func clearSessionId() {
    return _sessionId = nil
  }

  private var _msgIdBegin: UInt32? = nil
  var msgIdBegin: UInt32 {
    get {return _msgIdBegin ?? 0}
    set {_msgIdBegin = newValue}
  }
  public var hasMsgIdBegin: Bool {
    return _msgIdBegin != nil
  }
  public mutating func clearMsgIdBegin() {
    return _msgIdBegin = nil
  }

  private var _msgCnt: UInt32? = nil
  var msgCnt: UInt32 {
    get {return _msgCnt ?? 0}
    set {_msgCnt = newValue}
  }
  public var hasMsgCnt: Bool {
    return _msgCnt != nil
  }
  public mutating func clearMsgCnt() {
    return _msgCnt = nil
  }

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: IM_BaseDefine_SessionType.self, value: &_sessionType)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_sessionId)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_msgIdBegin)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_msgCnt)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: IM_BaseDefine_SessionType.self, value: _sessionType ?? IM_BaseDefine_SessionType.single, protoFieldNumber: 2)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _sessionId ?? 0, protoFieldNumber: 3)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _msgIdBegin ?? 0, protoFieldNumber: 4)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _msgCnt ?? 0, protoFieldNumber: 5)
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Message_IMGetMsgListReq) -> Bool {
    if (userId != other.userId) {return false}
    if (sessionType != other.sessionType) {return false}
    if (sessionId != other.sessionId) {return false}
    if (msgIdBegin != other.msgIdBegin) {return false}
    if (msgCnt != other.msgCnt) {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

///  对于群而言，如果消息数目返回的数值小于请求的cnt,则表示群的消息能拉取的到头了，更早的消息没有权限拉取。
///  如果msg_cnt 和 msg_id_begin计算得到的最早消息id与实际返回的最早消息id不一致，说明服务器消息有缺失，需要
///  客户端做一个缺失标记，避免下次再次拉取。
struct IM_Message_IMGetMsgListRsp: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Message_IMGetMsgListRsp"}
  public var protoMessageName: String {return "IMGetMsgListRsp"}
  public var protoPackageName: String {return "IM.Message"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "session_type", json: "sessionType", swift: "sessionType"),
    3: .unique(proto: "session_id", json: "sessionId", swift: "sessionId"),
    4: .unique(proto: "msg_id_begin", json: "msgIdBegin", swift: "msgIdBegin"),
    5: .unique(proto: "msg_list", json: "msgList", swift: "msgList"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:		0x030a
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _sessionType: IM_BaseDefine_SessionType? = nil
  var sessionType: IM_BaseDefine_SessionType {
    get {return _sessionType ?? IM_BaseDefine_SessionType.single}
    set {_sessionType = newValue}
  }
  public var hasSessionType: Bool {
    return _sessionType != nil
  }
  public mutating func clearSessionType() {
    return _sessionType = nil
  }

  private var _sessionId: UInt32? = nil
  var sessionId: UInt32 {
    get {return _sessionId ?? 0}
    set {_sessionId = newValue}
  }
  public var hasSessionId: Bool {
    return _sessionId != nil
  }
  public mutating func clearSessionId() {
    return _sessionId = nil
  }

  private var _msgIdBegin: UInt32? = nil
  var msgIdBegin: UInt32 {
    get {return _msgIdBegin ?? 0}
    set {_msgIdBegin = newValue}
  }
  public var hasMsgIdBegin: Bool {
    return _msgIdBegin != nil
  }
  public mutating func clearMsgIdBegin() {
    return _msgIdBegin = nil
  }

  var msgList: [IM_BaseDefine_MsgInfo] = []

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: IM_BaseDefine_SessionType.self, value: &_sessionType)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_sessionId)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_msgIdBegin)
    case 5: try setter.decodeRepeatedMessageField(fieldType: IM_BaseDefine_MsgInfo.self, value: &msgList)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: IM_BaseDefine_SessionType.self, value: _sessionType ?? IM_BaseDefine_SessionType.single, protoFieldNumber: 2)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _sessionId ?? 0, protoFieldNumber: 3)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _msgIdBegin ?? 0, protoFieldNumber: 4)
    if !msgList.isEmpty {
      try visitor.visitRepeatedMessageField(value: msgList, protoFieldNumber: 5)
    }
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Message_IMGetMsgListRsp) -> Bool {
    if (userId != other.userId) {return false}
    if (sessionType != other.sessionType) {return false}
    if (sessionId != other.sessionId) {return false}
    if (msgIdBegin != other.msgIdBegin) {return false}
    if msgList != other.msgList {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Message_IMGetLatestMsgIdReq: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Message_IMGetLatestMsgIdReq"}
  public var protoMessageName: String {return "IMGetLatestMsgIdReq"}
  public var protoPackageName: String {return "IM.Message"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "session_type", json: "sessionType", swift: "sessionType"),
    3: .unique(proto: "session_id", json: "sessionId", swift: "sessionId"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id: 		0x030b
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _sessionType: IM_BaseDefine_SessionType? = nil
  var sessionType: IM_BaseDefine_SessionType {
    get {return _sessionType ?? IM_BaseDefine_SessionType.single}
    set {_sessionType = newValue}
  }
  public var hasSessionType: Bool {
    return _sessionType != nil
  }
  public mutating func clearSessionType() {
    return _sessionType = nil
  }

  private var _sessionId: UInt32? = nil
  var sessionId: UInt32 {
    get {return _sessionId ?? 0}
    set {_sessionId = newValue}
  }
  public var hasSessionId: Bool {
    return _sessionId != nil
  }
  public mutating func clearSessionId() {
    return _sessionId = nil
  }

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: IM_BaseDefine_SessionType.self, value: &_sessionType)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_sessionId)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: IM_BaseDefine_SessionType.self, value: _sessionType ?? IM_BaseDefine_SessionType.single, protoFieldNumber: 2)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _sessionId ?? 0, protoFieldNumber: 3)
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Message_IMGetLatestMsgIdReq) -> Bool {
    if (userId != other.userId) {return false}
    if (sessionType != other.sessionType) {return false}
    if (sessionId != other.sessionId) {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Message_IMGetLatestMsgIdRsp: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Message_IMGetLatestMsgIdRsp"}
  public var protoMessageName: String {return "IMGetLatestMsgIdRsp"}
  public var protoPackageName: String {return "IM.Message"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "session_type", json: "sessionType", swift: "sessionType"),
    3: .unique(proto: "session_id", json: "sessionId", swift: "sessionId"),
    4: .unique(proto: "latest_msg_id", json: "latestMsgId", swift: "latestMsgId"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:		0x030c
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _sessionType: IM_BaseDefine_SessionType? = nil
  var sessionType: IM_BaseDefine_SessionType {
    get {return _sessionType ?? IM_BaseDefine_SessionType.single}
    set {_sessionType = newValue}
  }
  public var hasSessionType: Bool {
    return _sessionType != nil
  }
  public mutating func clearSessionType() {
    return _sessionType = nil
  }

  private var _sessionId: UInt32? = nil
  var sessionId: UInt32 {
    get {return _sessionId ?? 0}
    set {_sessionId = newValue}
  }
  public var hasSessionId: Bool {
    return _sessionId != nil
  }
  public mutating func clearSessionId() {
    return _sessionId = nil
  }

  private var _latestMsgId: UInt32? = nil
  var latestMsgId: UInt32 {
    get {return _latestMsgId ?? 0}
    set {_latestMsgId = newValue}
  }
  public var hasLatestMsgId: Bool {
    return _latestMsgId != nil
  }
  public mutating func clearLatestMsgId() {
    return _latestMsgId = nil
  }

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: IM_BaseDefine_SessionType.self, value: &_sessionType)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_sessionId)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_latestMsgId)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: IM_BaseDefine_SessionType.self, value: _sessionType ?? IM_BaseDefine_SessionType.single, protoFieldNumber: 2)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _sessionId ?? 0, protoFieldNumber: 3)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _latestMsgId ?? 0, protoFieldNumber: 4)
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Message_IMGetLatestMsgIdRsp) -> Bool {
    if (userId != other.userId) {return false}
    if (sessionType != other.sessionType) {return false}
    if (sessionId != other.sessionId) {return false}
    if (latestMsgId != other.latestMsgId) {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Message_IMGetMsgByIdReq: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Message_IMGetMsgByIdReq"}
  public var protoMessageName: String {return "IMGetMsgByIdReq"}
  public var protoPackageName: String {return "IM.Message"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "session_type", json: "sessionType", swift: "sessionType"),
    3: .unique(proto: "session_id", json: "sessionId", swift: "sessionId"),
    4: .unique(proto: "msg_id_list", json: "msgIdList", swift: "msgIdList"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id: 		0x030d
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _sessionType: IM_BaseDefine_SessionType? = nil
  var sessionType: IM_BaseDefine_SessionType {
    get {return _sessionType ?? IM_BaseDefine_SessionType.single}
    set {_sessionType = newValue}
  }
  public var hasSessionType: Bool {
    return _sessionType != nil
  }
  public mutating func clearSessionType() {
    return _sessionType = nil
  }

  private var _sessionId: UInt32? = nil
  var sessionId: UInt32 {
    get {return _sessionId ?? 0}
    set {_sessionId = newValue}
  }
  public var hasSessionId: Bool {
    return _sessionId != nil
  }
  public mutating func clearSessionId() {
    return _sessionId = nil
  }

  var msgIdList: [UInt32] = []

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: IM_BaseDefine_SessionType.self, value: &_sessionType)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_sessionId)
    case 4: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &msgIdList)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: IM_BaseDefine_SessionType.self, value: _sessionType ?? IM_BaseDefine_SessionType.single, protoFieldNumber: 2)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _sessionId ?? 0, protoFieldNumber: 3)
    if !msgIdList.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: msgIdList, protoFieldNumber: 4)
    }
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Message_IMGetMsgByIdReq) -> Bool {
    if (userId != other.userId) {return false}
    if (sessionType != other.sessionType) {return false}
    if (sessionId != other.sessionId) {return false}
    if msgIdList != other.msgIdList {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Message_IMGetMsgByIdRsp: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Message_IMGetMsgByIdRsp"}
  public var protoMessageName: String {return "IMGetMsgByIdRsp"}
  public var protoPackageName: String {return "IM.Message"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "session_type", json: "sessionType", swift: "sessionType"),
    3: .unique(proto: "session_id", json: "sessionId", swift: "sessionId"),
    4: .unique(proto: "msg_list", json: "msgList", swift: "msgList"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:		0x030e
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _sessionType: IM_BaseDefine_SessionType? = nil
  var sessionType: IM_BaseDefine_SessionType {
    get {return _sessionType ?? IM_BaseDefine_SessionType.single}
    set {_sessionType = newValue}
  }
  public var hasSessionType: Bool {
    return _sessionType != nil
  }
  public mutating func clearSessionType() {
    return _sessionType = nil
  }

  private var _sessionId: UInt32? = nil
  var sessionId: UInt32 {
    get {return _sessionId ?? 0}
    set {_sessionId = newValue}
  }
  public var hasSessionId: Bool {
    return _sessionId != nil
  }
  public mutating func clearSessionId() {
    return _sessionId = nil
  }

  var msgList: [IM_BaseDefine_MsgInfo] = []

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: IM_BaseDefine_SessionType.self, value: &_sessionType)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_sessionId)
    case 4: try setter.decodeRepeatedMessageField(fieldType: IM_BaseDefine_MsgInfo.self, value: &msgList)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: IM_BaseDefine_SessionType.self, value: _sessionType ?? IM_BaseDefine_SessionType.single, protoFieldNumber: 2)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _sessionId ?? 0, protoFieldNumber: 3)
    if !msgList.isEmpty {
      try visitor.visitRepeatedMessageField(value: msgList, protoFieldNumber: 4)
    }
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Message_IMGetMsgByIdRsp) -> Bool {
    if (userId != other.userId) {return false}
    if (sessionType != other.sessionType) {return false}
    if (sessionId != other.sessionId) {return false}
    if msgList != other.msgList {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}
