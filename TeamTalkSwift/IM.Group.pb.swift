/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: IM.Group.proto
 *
 */

import Foundation
import SwiftProtobuf


// service id:0x0004

struct IM_Group_IMNormalGroupListReq: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Group_IMNormalGroupListReq"}
  public var protoMessageName: String {return "IMNormalGroupListReq"}
  public var protoPackageName: String {return "IM.Group"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:			0x0401
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Group_IMNormalGroupListReq) -> Bool {
    if (userId != other.userId) {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Group_IMNormalGroupListRsp: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Group_IMNormalGroupListRsp"}
  public var protoMessageName: String {return "IMNormalGroupListRsp"}
  public var protoPackageName: String {return "IM.Group"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "group_version_list", json: "groupVersionList", swift: "groupVersionList"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:			0x0402
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  var groupVersionList: [IM_BaseDefine_GroupVersionInfo] = []

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeRepeatedMessageField(fieldType: IM_BaseDefine_GroupVersionInfo.self, value: &groupVersionList)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    if !groupVersionList.isEmpty {
      try visitor.visitRepeatedMessageField(value: groupVersionList, protoFieldNumber: 2)
    }
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Group_IMNormalGroupListRsp) -> Bool {
    if (userId != other.userId) {return false}
    if groupVersionList != other.groupVersionList {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Group_IMGroupInfoListReq: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Group_IMGroupInfoListReq"}
  public var protoMessageName: String {return "IMGroupInfoListReq"}
  public var protoPackageName: String {return "IM.Group"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "group_version_list", json: "groupVersionList", swift: "groupVersionList"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:			0x0403
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  var groupVersionList: [IM_BaseDefine_GroupVersionInfo] = []

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeRepeatedMessageField(fieldType: IM_BaseDefine_GroupVersionInfo.self, value: &groupVersionList)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    if !groupVersionList.isEmpty {
      try visitor.visitRepeatedMessageField(value: groupVersionList, protoFieldNumber: 2)
    }
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Group_IMGroupInfoListReq) -> Bool {
    if (userId != other.userId) {return false}
    if groupVersionList != other.groupVersionList {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Group_IMGroupInfoListRsp: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Group_IMGroupInfoListRsp"}
  public var protoMessageName: String {return "IMGroupInfoListRsp"}
  public var protoPackageName: String {return "IM.Group"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "group_info_list", json: "groupInfoList", swift: "groupInfoList"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:			0x0404
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  var groupInfoList: [IM_BaseDefine_GroupInfo] = []

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeRepeatedMessageField(fieldType: IM_BaseDefine_GroupInfo.self, value: &groupInfoList)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    if !groupInfoList.isEmpty {
      try visitor.visitRepeatedMessageField(value: groupInfoList, protoFieldNumber: 2)
    }
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Group_IMGroupInfoListRsp) -> Bool {
    if (userId != other.userId) {return false}
    if groupInfoList != other.groupInfoList {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Group_IMGroupCreateReq: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Group_IMGroupCreateReq"}
  public var protoMessageName: String {return "IMGroupCreateReq"}
  public var protoPackageName: String {return "IM.Group"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "group_type", json: "groupType", swift: "groupType"),
    3: .unique(proto: "group_name", json: "groupName", swift: "groupName"),
    4: .unique(proto: "group_avatar", json: "groupAvatar", swift: "groupAvatar"),
    5: .unique(proto: "member_id_list", json: "memberIdList", swift: "memberIdList"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:			0x0405
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  ///  默认是创建临时群，且客户端只能创建临时群
  private var _groupType: IM_BaseDefine_GroupType? = nil
  var groupType: IM_BaseDefine_GroupType {
    get {return _groupType ?? IM_BaseDefine_GroupType.tmp}
    set {_groupType = newValue}
  }
  public var hasGroupType: Bool {
    return _groupType != nil
  }
  public mutating func clearGroupType() {
    return _groupType = nil
  }

  private var _groupName: String? = nil
  var groupName: String {
    get {return _groupName ?? ""}
    set {_groupName = newValue}
  }
  public var hasGroupName: Bool {
    return _groupName != nil
  }
  public mutating func clearGroupName() {
    return _groupName = nil
  }

  private var _groupAvatar: String? = nil
  var groupAvatar: String {
    get {return _groupAvatar ?? ""}
    set {_groupAvatar = newValue}
  }
  public var hasGroupAvatar: Bool {
    return _groupAvatar != nil
  }
  public mutating func clearGroupAvatar() {
    return _groupAvatar = nil
  }

  var memberIdList: [UInt32] = []

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: IM_BaseDefine_GroupType.self, value: &_groupType)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_groupName)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_groupAvatar)
    case 5: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &memberIdList)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: IM_BaseDefine_GroupType.self, value: _groupType ?? IM_BaseDefine_GroupType.tmp, protoFieldNumber: 2)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _groupName ?? "", protoFieldNumber: 3)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _groupAvatar ?? "", protoFieldNumber: 4)
    if !memberIdList.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: memberIdList, protoFieldNumber: 5)
    }
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Group_IMGroupCreateReq) -> Bool {
    if (userId != other.userId) {return false}
    if (((_groupType != nil && _groupType! != IM_BaseDefine_GroupType.tmp) || (other._groupType != nil && other._groupType! != IM_BaseDefine_GroupType.tmp)) && (_groupType == nil || other._groupType == nil || _groupType! != other._groupType!)) {return false}
    if (groupName != other.groupName) {return false}
    if (groupAvatar != other.groupAvatar) {return false}
    if memberIdList != other.memberIdList {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Group_IMGroupCreateRsp: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Group_IMGroupCreateRsp"}
  public var protoMessageName: String {return "IMGroupCreateRsp"}
  public var protoPackageName: String {return "IM.Group"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "result_code", json: "resultCode", swift: "resultCode"),
    3: .unique(proto: "group_id", json: "groupId", swift: "groupId"),
    4: .unique(proto: "group_name", json: "groupName", swift: "groupName"),
    5: .unique(proto: "user_id_list", json: "userIdList", swift: "userIdList"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:			0x0406
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _resultCode: UInt32? = nil
  var resultCode: UInt32 {
    get {return _resultCode ?? 0}
    set {_resultCode = newValue}
  }
  public var hasResultCode: Bool {
    return _resultCode != nil
  }
  public mutating func clearResultCode() {
    return _resultCode = nil
  }

  private var _groupId: UInt32? = nil
  var groupId: UInt32 {
    get {return _groupId ?? 0}
    set {_groupId = newValue}
  }
  public var hasGroupId: Bool {
    return _groupId != nil
  }
  public mutating func clearGroupId() {
    return _groupId = nil
  }

  private var _groupName: String? = nil
  var groupName: String {
    get {return _groupName ?? ""}
    set {_groupName = newValue}
  }
  public var hasGroupName: Bool {
    return _groupName != nil
  }
  public mutating func clearGroupName() {
    return _groupName = nil
  }

  var userIdList: [UInt32] = []

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_resultCode)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_groupId)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_groupName)
    case 5: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &userIdList)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _resultCode ?? 0, protoFieldNumber: 2)
    if let v = _groupId {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: v, protoFieldNumber: 3)
    }
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _groupName ?? "", protoFieldNumber: 4)
    if !userIdList.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: userIdList, protoFieldNumber: 5)
    }
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Group_IMGroupCreateRsp) -> Bool {
    if (userId != other.userId) {return false}
    if (resultCode != other.resultCode) {return false}
    if (groupId != other.groupId) {return false}
    if (groupName != other.groupName) {return false}
    if userIdList != other.userIdList {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Group_IMGroupChangeMemberReq: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Group_IMGroupChangeMemberReq"}
  public var protoMessageName: String {return "IMGroupChangeMemberReq"}
  public var protoPackageName: String {return "IM.Group"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "change_type", json: "changeType", swift: "changeType"),
    3: .unique(proto: "group_id", json: "groupId", swift: "groupId"),
    4: .unique(proto: "member_id_list", json: "memberIdList", swift: "memberIdList"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:			0x0407
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _changeType: IM_BaseDefine_GroupModifyType? = nil
  var changeType: IM_BaseDefine_GroupModifyType {
    get {return _changeType ?? IM_BaseDefine_GroupModifyType.add}
    set {_changeType = newValue}
  }
  public var hasChangeType: Bool {
    return _changeType != nil
  }
  public mutating func clearChangeType() {
    return _changeType = nil
  }

  private var _groupId: UInt32? = nil
  var groupId: UInt32 {
    get {return _groupId ?? 0}
    set {_groupId = newValue}
  }
  public var hasGroupId: Bool {
    return _groupId != nil
  }
  public mutating func clearGroupId() {
    return _groupId = nil
  }

  var memberIdList: [UInt32] = []

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: IM_BaseDefine_GroupModifyType.self, value: &_changeType)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_groupId)
    case 4: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &memberIdList)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: IM_BaseDefine_GroupModifyType.self, value: _changeType ?? IM_BaseDefine_GroupModifyType.add, protoFieldNumber: 2)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _groupId ?? 0, protoFieldNumber: 3)
    if !memberIdList.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: memberIdList, protoFieldNumber: 4)
    }
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Group_IMGroupChangeMemberReq) -> Bool {
    if (userId != other.userId) {return false}
    if (changeType != other.changeType) {return false}
    if (groupId != other.groupId) {return false}
    if memberIdList != other.memberIdList {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Group_IMGroupChangeMemberRsp: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Group_IMGroupChangeMemberRsp"}
  public var protoMessageName: String {return "IMGroupChangeMemberRsp"}
  public var protoPackageName: String {return "IM.Group"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "change_type", json: "changeType", swift: "changeType"),
    3: .unique(proto: "result_code", json: "resultCode", swift: "resultCode"),
    4: .unique(proto: "group_id", json: "groupId", swift: "groupId"),
    5: .unique(proto: "cur_user_id_list", json: "curUserIdList", swift: "curUserIdList"),
    6: .unique(proto: "chg_user_id_list", json: "chgUserIdList", swift: "chgUserIdList"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:			0x0408
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _changeType: IM_BaseDefine_GroupModifyType? = nil
  var changeType: IM_BaseDefine_GroupModifyType {
    get {return _changeType ?? IM_BaseDefine_GroupModifyType.add}
    set {_changeType = newValue}
  }
  public var hasChangeType: Bool {
    return _changeType != nil
  }
  public mutating func clearChangeType() {
    return _changeType = nil
  }

  private var _resultCode: UInt32? = nil
  var resultCode: UInt32 {
    get {return _resultCode ?? 0}
    set {_resultCode = newValue}
  }
  public var hasResultCode: Bool {
    return _resultCode != nil
  }
  public mutating func clearResultCode() {
    return _resultCode = nil
  }

  private var _groupId: UInt32? = nil
  var groupId: UInt32 {
    get {return _groupId ?? 0}
    set {_groupId = newValue}
  }
  public var hasGroupId: Bool {
    return _groupId != nil
  }
  public mutating func clearGroupId() {
    return _groupId = nil
  }

  ///  现有的成员id		
  var curUserIdList: [UInt32] = []

  ///  变动的成员id,add: 表示添加成功的id,   del: 表示删除的id
  var chgUserIdList: [UInt32] = []

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: IM_BaseDefine_GroupModifyType.self, value: &_changeType)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_resultCode)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_groupId)
    case 5: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &curUserIdList)
    case 6: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &chgUserIdList)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: IM_BaseDefine_GroupModifyType.self, value: _changeType ?? IM_BaseDefine_GroupModifyType.add, protoFieldNumber: 2)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _resultCode ?? 0, protoFieldNumber: 3)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _groupId ?? 0, protoFieldNumber: 4)
    if !curUserIdList.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: curUserIdList, protoFieldNumber: 5)
    }
    if !chgUserIdList.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: chgUserIdList, protoFieldNumber: 6)
    }
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Group_IMGroupChangeMemberRsp) -> Bool {
    if (userId != other.userId) {return false}
    if (changeType != other.changeType) {return false}
    if (resultCode != other.resultCode) {return false}
    if (groupId != other.groupId) {return false}
    if curUserIdList != other.curUserIdList {return false}
    if chgUserIdList != other.chgUserIdList {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Group_IMGroupShieldReq: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Group_IMGroupShieldReq"}
  public var protoMessageName: String {return "IMGroupShieldReq"}
  public var protoPackageName: String {return "IM.Group"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "group_id", json: "groupId", swift: "groupId"),
    3: .unique(proto: "shield_status", json: "shieldStatus", swift: "shieldStatus"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:			0x0409
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _groupId: UInt32? = nil
  var groupId: UInt32 {
    get {return _groupId ?? 0}
    set {_groupId = newValue}
  }
  public var hasGroupId: Bool {
    return _groupId != nil
  }
  public mutating func clearGroupId() {
    return _groupId = nil
  }

  private var _shieldStatus: UInt32? = nil
  var shieldStatus: UInt32 {
    get {return _shieldStatus ?? 0}
    set {_shieldStatus = newValue}
  }
  public var hasShieldStatus: Bool {
    return _shieldStatus != nil
  }
  public mutating func clearShieldStatus() {
    return _shieldStatus = nil
  }

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_groupId)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_shieldStatus)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _groupId ?? 0, protoFieldNumber: 2)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _shieldStatus ?? 0, protoFieldNumber: 3)
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Group_IMGroupShieldReq) -> Bool {
    if (userId != other.userId) {return false}
    if (groupId != other.groupId) {return false}
    if (shieldStatus != other.shieldStatus) {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Group_IMGroupShieldRsp: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Group_IMGroupShieldRsp"}
  public var protoMessageName: String {return "IMGroupShieldRsp"}
  public var protoPackageName: String {return "IM.Group"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "group_id", json: "groupId", swift: "groupId"),
    3: .unique(proto: "result_code", json: "resultCode", swift: "resultCode"),
    20: .unique(proto: "attach_data", json: "attachData", swift: "attachData"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id:			0x040a
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _groupId: UInt32? = nil
  var groupId: UInt32 {
    get {return _groupId ?? 0}
    set {_groupId = newValue}
  }
  public var hasGroupId: Bool {
    return _groupId != nil
  }
  public mutating func clearGroupId() {
    return _groupId = nil
  }

  ///  0:successed 1:failed
  private var _resultCode: UInt32? = nil
  var resultCode: UInt32 {
    get {return _resultCode ?? 0}
    set {_resultCode = newValue}
  }
  public var hasResultCode: Bool {
    return _resultCode != nil
  }
  public mutating func clearResultCode() {
    return _resultCode = nil
  }

  private var _attachData: Data? = nil
  var attachData: Data {
    get {return _attachData ?? Data()}
    set {_attachData = newValue}
  }
  public var hasAttachData: Bool {
    return _attachData != nil
  }
  public mutating func clearAttachData() {
    return _attachData = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_groupId)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_resultCode)
    case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_attachData)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _groupId ?? 0, protoFieldNumber: 2)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _resultCode ?? 0, protoFieldNumber: 3)
    if let v = _attachData {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 20)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Group_IMGroupShieldRsp) -> Bool {
    if (userId != other.userId) {return false}
    if (groupId != other.groupId) {return false}
    if (resultCode != other.resultCode) {return false}
    if (attachData != other.attachData) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct IM_Group_IMGroupChangeMemberNotify: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "IM_Group_IMGroupChangeMemberNotify"}
  public var protoMessageName: String {return "IMGroupChangeMemberNotify"}
  public var protoPackageName: String {return "IM.Group"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "change_type", json: "changeType", swift: "changeType"),
    3: .unique(proto: "group_id", json: "groupId", swift: "groupId"),
    4: .unique(proto: "cur_user_id_list", json: "curUserIdList", swift: "curUserIdList"),
    5: .unique(proto: "chg_user_id_list", json: "chgUserIdList", swift: "chgUserIdList"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///  cmd id: 			0x040b
  private var _userId: UInt32? = nil
  var userId: UInt32 {
    get {return _userId ?? 0}
    set {_userId = newValue}
  }
  public var hasUserId: Bool {
    return _userId != nil
  }
  public mutating func clearUserId() {
    return _userId = nil
  }

  private var _changeType: IM_BaseDefine_GroupModifyType? = nil
  var changeType: IM_BaseDefine_GroupModifyType {
    get {return _changeType ?? IM_BaseDefine_GroupModifyType.add}
    set {_changeType = newValue}
  }
  public var hasChangeType: Bool {
    return _changeType != nil
  }
  public mutating func clearChangeType() {
    return _changeType = nil
  }

  private var _groupId: UInt32? = nil
  var groupId: UInt32 {
    get {return _groupId ?? 0}
    set {_groupId = newValue}
  }
  public var hasGroupId: Bool {
    return _groupId != nil
  }
  public mutating func clearGroupId() {
    return _groupId = nil
  }

  ///  现有的成员id
  var curUserIdList: [UInt32] = []

  ///  add: 表示添加成功的id,   del: 表示删除的id
  var chgUserIdList: [UInt32] = []

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_userId)
    case 2: try setter.decodeSingularField(fieldType: IM_BaseDefine_GroupModifyType.self, value: &_changeType)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_groupId)
    case 4: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &curUserIdList)
    case 5: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &chgUserIdList)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _userId ?? 0, protoFieldNumber: 1)
    try visitor.visitSingularField(fieldType: IM_BaseDefine_GroupModifyType.self, value: _changeType ?? IM_BaseDefine_GroupModifyType.add, protoFieldNumber: 2)
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _groupId ?? 0, protoFieldNumber: 3)
    if !curUserIdList.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: curUserIdList, protoFieldNumber: 4)
    }
    if !chgUserIdList.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: chgUserIdList, protoFieldNumber: 5)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: IM_Group_IMGroupChangeMemberNotify) -> Bool {
    if (userId != other.userId) {return false}
    if (changeType != other.changeType) {return false}
    if (groupId != other.groupId) {return false}
    if curUserIdList != other.curUserIdList {return false}
    if chgUserIdList != other.chgUserIdList {return false}
    if unknown != other.unknown {return false}
    return true
  }
}
